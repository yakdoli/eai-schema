name: 릴리즈 관리

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  # 릴리즈 전 검증
  pre-release-validation:
    name: 릴리즈 전 검증
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    timeout-minutes: 15
    
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      next-version: ${{ steps.version.outputs.next-version }}
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 전체 테스트 실행
        run: |
          npm run test:unit
          npm run test:integration
        env:
          NODE_ENV: test

      - name: 빌드 검증
        run: npm run build

      - name: 릴리즈 가능 여부 확인
        id: check
        run: |
          # semantic-release dry-run으로 릴리즈 가능 여부 확인
          npx semantic-release --dry-run > release-check.log 2>&1 || true
          
          if grep -q "The next release version is" release-check.log; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "✅ 새로운 릴리즈가 생성됩니다"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ 릴리즈할 변경사항이 없습니다"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 다음 버전 확인
        id: version
        if: steps.check.outputs.should-release == 'true'
        run: |
          NEXT_VERSION=$(npx semantic-release --dry-run 2>&1 | grep "The next release version is" | sed 's/.*The next release version is //' || echo "unknown")
          echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "다음 릴리즈 버전: $NEXT_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 릴리즈 노트 생성 및 태그 생성
  create-release:
    name: 릴리즈 생성
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: needs.pre-release-validation.outputs.should-release == 'true'
    timeout-minutes: 10
    
    outputs:
      release-version: ${{ steps.release.outputs.new-release-version }}
      release-notes: ${{ steps.release.outputs.new-release-notes }}
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 릴리즈 실행
        id: release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 릴리즈 정보 출력
        if: steps.release.outputs.new-release-version
        run: |
          echo "## 🎉 새로운 릴리즈 생성" >> $GITHUB_STEP_SUMMARY
          echo "버전: v${{ steps.release.outputs.new-release-version }}" >> $GITHUB_STEP_SUMMARY
          echo "릴리즈 시간: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # 릴리즈 아티팩트 빌드
  build-artifacts:
    name: 릴리즈 아티팩트 빌드
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.release-version
    timeout-minutes: 15
    
    strategy:
      matrix:
        platform: [linux, windows, macos]
        include:
          - platform: linux
            os: ubuntu-latest
            target: linux-x64
          - platform: windows
            os: windows-latest
            target: win-x64
          - platform: macos
            os: macos-latest
            target: darwin-x64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-release.outputs.release-version }}

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 프로덕션 빌드
        run: npm run build

      - name: 아티팩트 패키징 (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          mkdir -p release-artifacts
          tar -czf release-artifacts/eai-schema-toolkit-v${{ needs.create-release.outputs.release-version }}-${{ matrix.target }}.tar.gz \
            dist/ package.json package-lock.json README.md LICENSE

      - name: 아티팩트 패키징 (Windows)
        if: matrix.platform == 'windows'
        run: |
          mkdir release-artifacts
          Compress-Archive -Path dist/, package.json, package-lock.json, README.md, LICENSE -DestinationPath release-artifacts/eai-schema-toolkit-v${{ needs.create-release.outputs.release-version }}-${{ matrix.target }}.zip

      - name: 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: release-artifacts/
          retention-days: 30

  # GitHub Release에 아티팩트 첨부
  attach-artifacts:
    name: 릴리즈 아티팩트 첨부
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts]
    if: needs.create-release.outputs.release-version
    timeout-minutes: 10
    
    steps:
      - name: 모든 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: 아티팩트 GitHub Release에 첨부
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.create-release.outputs.release-version }}
          files: all-artifacts/**/*
          body: |
            ## 🚀 릴리즈 v${{ needs.create-release.outputs.release-version }}
            
            ### 📦 다운로드
            - **Linux**: `eai-schema-toolkit-v${{ needs.create-release.outputs.release-version }}-linux-x64.tar.gz`
            - **Windows**: `eai-schema-toolkit-v${{ needs.create-release.outputs.release-version }}-win-x64.zip`
            - **macOS**: `eai-schema-toolkit-v${{ needs.create-release.outputs.release-version }}-darwin-x64.tar.gz`
            
            ### 📋 변경사항
            ${{ needs.create-release.outputs.release-notes }}
            
            ### 🔧 설치 방법
            ```bash
            # npm으로 설치
            npm install -g eai-schema-toolkit@${{ needs.create-release.outputs.release-version }}
            
            # 또는 직접 다운로드 후 압축 해제
            tar -xzf eai-schema-toolkit-v${{ needs.create-release.outputs.release-version }}-linux-x64.tar.gz
            cd eai-schema-toolkit
            npm install --production
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker 이미지 빌드 및 푸시 (선택사항)
  build-docker:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.release-version && hashFiles('Dockerfile') != ''
    timeout-minutes: 20
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-release.outputs.release-version }}

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: GitHub Container Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.create-release.outputs.release-version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.create-release.outputs.release-version }}
            type=semver,pattern={{major}},value=v${{ needs.create-release.outputs.release-version }}
            type=raw,value=latest

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 릴리즈 후 알림
  post-release-notification:
    name: 릴리즈 후 알림
    runs-on: ubuntu-latest
    needs: [create-release, attach-artifacts]
    if: always() && needs.create-release.outputs.release-version
    timeout-minutes: 5
    
    steps:
      - name: 릴리즈 완료 알림
        run: |
          echo "## 🎉 릴리즈 완료" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 버전 | v${{ needs.create-release.outputs.release-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 릴리즈 시간 | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | [보기](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.release-version }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 아티팩트 상태 | ${{ needs.attach-artifacts.result == 'success' && '✅ 첨부 완료' || '❌ 첨부 실패' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 슬랙 알림 (선택사항)
        if: success() && vars.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🎉 EAI Schema Toolkit v${{ needs.create-release.outputs.release-version }} 릴리즈 완료!\n릴리즈 노트: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.release-version }}"}' \
            ${{ vars.SLACK_WEBHOOK_URL }}
        continue-on-error: true