name: 롤백 시스템

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '롤백할 환경'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: '롤백할 버전 (예: v1.2.3 또는 커밋 해시)'
        required: true
        type: string
      reason:
        description: '롤백 사유'
        required: true
        type: string

permissions:
  contents: read
  deployments: write

jobs:
  # 롤백 전 검증
  pre-rollback-validation:
    name: 롤백 전 검증
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      target-commit: ${{ steps.validate.outputs.target-commit }}
      current-version: ${{ steps.validate.outputs.current-version }}
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 롤백 대상 검증
        id: validate
        run: |
          echo "롤백 요청 정보:"
          echo "- 환경: ${{ github.event.inputs.environment }}"
          echo "- 버전: ${{ github.event.inputs.version }}"
          echo "- 사유: ${{ github.event.inputs.reason }}"
          
          # 현재 버전 확인
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # 롤백 대상 커밋 확인
          TARGET_VERSION="${{ github.event.inputs.version }}"
          
          if [[ "$TARGET_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # 버전 태그로 롤백
            TARGET_COMMIT=$(git rev-list -n 1 "$TARGET_VERSION" 2>/dev/null || echo "")
          else
            # 커밋 해시로 롤백
            TARGET_COMMIT=$(git rev-parse --verify "$TARGET_VERSION^{commit}" 2>/dev/null || echo "")
          fi
          
          if [ -z "$TARGET_COMMIT" ]; then
            echo "❌ 유효하지 않은 버전 또는 커밋: $TARGET_VERSION"
            exit 1
          fi
          
          echo "target-commit=$TARGET_COMMIT" >> $GITHUB_OUTPUT
          echo "✅ 롤백 대상 검증 완료: $TARGET_COMMIT"

      - name: 롤백 승인 확인
        run: |
          echo "## ⚠️ 롤백 실행 예정" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 환경 | ${{ github.event.inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 현재 버전 | ${{ steps.validate.outputs.current-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 롤백 대상 | ${{ github.event.inputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 대상 커밋 | ${{ steps.validate.outputs.target-commit }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 롤백 사유 | ${{ github.event.inputs.reason }} |" >> $GITHUB_STEP_SUMMARY

  # 스테이징 롤백
  rollback-staging:
    name: 스테이징 롤백
    runs-on: ubuntu-latest
    needs: pre-rollback-validation
    if: github.event.inputs.environment == 'staging'
    timeout-minutes: 15
    
    environment:
      name: staging
      url: https://eai-schema-staging.herokuapp.com
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 롤백 대상 체크아웃
        run: |
          git checkout ${{ needs.pre-rollback-validation.outputs.target-commit }}

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 롤백 버전 빌드
        run: npm run build

      - name: Heroku CLI 설치
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: 스테이징 롤백 실행
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_STAGING_APP: eai-schema-staging
        run: |
          echo "machine api.heroku.com login _ password $HEROKU_API_KEY" > ~/.netrc
          echo "machine git.heroku.com login _ password $HEROKU_API_KEY" >> ~/.netrc
          chmod 600 ~/.netrc
          
          heroku git:remote -a "$HEROKU_STAGING_APP"
          
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action Rollback"
          
          git add -f dist/ package.json package-lock.json Procfile app.json
          git commit -m "Rollback to ${{ github.event.inputs.version }} - ${{ github.event.inputs.reason }} [skip ci]"
          
          git push heroku HEAD:main --force

      - name: 롤백 검증
        run: |
          echo "롤백 검증 대기 중..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f -s https://eai-schema-staging.herokuapp.com/health > /dev/null; then
              echo "✅ 스테이징 롤백 성공"
              exit 0
            fi
            echo "검증 시도 $i/10 실패, 10초 후 재시도..."
            sleep 10
          done
          
          echo "❌ 스테이징 롤백 검증 실패"
          exit 1

  # 프로덕션 롤백
  rollback-production:
    name: 프로덕션 롤백
    runs-on: ubuntu-latest
    needs: pre-rollback-validation
    if: github.event.inputs.environment == 'production'
    timeout-minutes: 20
    
    environment:
      name: production
      url: https://eai-schema-api.herokuapp.com
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 롤백 대상 체크아웃
        run: |
          git checkout ${{ needs.pre-rollback-validation.outputs.target-commit }}

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 롤백 버전 빌드
        run: npm run build

      - name: Heroku CLI 설치
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: 프로덕션 롤백 실행
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_PRODUCTION_APP: eai-schema-api
        run: |
          echo "machine api.heroku.com login _ password $HEROKU_API_KEY" > ~/.netrc
          echo "machine git.heroku.com login _ password $HEROKU_API_KEY" >> ~/.netrc
          chmod 600 ~/.netrc
          
          heroku git:remote -a "$HEROKU_PRODUCTION_APP"
          
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action Rollback"
          
          git add -f dist/ package.json package-lock.json Procfile app.json
          git commit -m "PRODUCTION ROLLBACK to ${{ github.event.inputs.version }} - ${{ github.event.inputs.reason }} [skip ci]"
          
          git push heroku HEAD:main --force

      - name: 프로덕션 롤백 검증
        run: |
          echo "프로덕션 롤백 검증 대기 중..."
          sleep 60
          
          for i in {1..15}; do
            if curl -f -s https://eai-schema-api.herokuapp.com/health > /dev/null; then
              echo "✅ 프로덕션 롤백 성공"
              exit 0
            fi
            echo "검증 시도 $i/15 실패, 15초 후 재시도..."
            sleep 15
          done
          
          echo "❌ 프로덕션 롤백 검증 실패"
          exit 1

      - name: 긴급 알림
        if: failure()
        run: |
          echo "## 🚨 프로덕션 롤백 실패" >> $GITHUB_STEP_SUMMARY
          echo "즉시 수동 개입이 필요합니다!" >> $GITHUB_STEP_SUMMARY
          echo "롤백 대상: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "실패 시간: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # 롤백 후 모니터링
  post-rollback-monitoring:
    name: 롤백 후 모니터링
    runs-on: ubuntu-latest
    needs: [rollback-staging, rollback-production]
    if: always() && (needs.rollback-staging.result == 'success' || needs.rollback-production.result == 'success')
    timeout-minutes: 15
    
    steps:
      - name: 롤백 환경 결정
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "url=https://eai-schema-api.herokuapp.com" >> $GITHUB_OUTPUT
            echo "env_name=프로덕션" >> $GITHUB_OUTPUT
          else
            echo "url=https://eai-schema-staging.herokuapp.com" >> $GITHUB_OUTPUT
            echo "env_name=스테이징" >> $GITHUB_OUTPUT
          fi

      - name: 롤백 후 모니터링
        run: |
          echo "${{ steps.env.outputs.env_name }} 환경 롤백 후 모니터링 시작..."
          
          # 10분간 안정성 모니터링
          for i in {1..10}; do
            if curl -f -s ${{ steps.env.outputs.url }}/health > /dev/null; then
              echo "모니터링 $i/10: ✅ 정상"
            else
              echo "모니터링 $i/10: ❌ 오류 감지"
              # 추가 알림 로직 필요시 구현
            fi
            sleep 60
          done
          
          echo "✅ 롤백 후 모니터링 완료"

      - name: 롤백 완료 보고
        run: |
          echo "## ✅ 롤백 완료" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 환경 | ${{ github.event.inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 롤백 버전 | ${{ github.event.inputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 롤백 사유 | ${{ github.event.inputs.reason }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 완료 시간 | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| 상태 | 정상 작동 중 |" >> $GITHUB_STEP_SUMMARY