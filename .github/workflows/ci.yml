name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# 동시 실행 제한 - 같은 브랜치에서는 하나의 워크플로우만 실행
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 코드 품질 검사
  code-quality:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarCloud 분석을 위한 전체 히스토리

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: TypeScript 타입 체크
        run: npx tsc --noEmit

      - name: ESLint 실행
        run: npm run lint

      - name: 코드 포맷팅 체크 (Prettier)
        run: |
          if command -v prettier &> /dev/null; then
            npx prettier --check "src/**/*.{ts,js,json}"
          else
            echo "Prettier not configured, skipping format check"
          fi

  # 보안 스캔
  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: npm audit 실행
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Snyk 보안 스캔
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: CodeQL 분석 초기화
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: CodeQL 분석 실행
        uses: github/codeql-action/analyze@v3

  # 단위 테스트
  unit-tests:
    name: 단위 테스트
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [20, 22]
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js ${{ matrix.node-version }} 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 단위 테스트 실행
        run: npm run test:unit -- --coverage --verbose

      - name: 테스트 커버리지 업로드
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 22
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 통합 테스트
  integration-tests:
    name: 통합 테스트
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, unit-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 애플리케이션 빌드
        run: npm run build

      - name: 통합 테스트 실행
        run: npm run test:integration
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379

  # E2E 테스트
  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [integration-tests]
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: Playwright 브라우저 설치
        run: npx playwright install --with-deps

      - name: 애플리케이션 빌드
        run: npm run build

      - name: E2E 테스트 실행
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: E2E 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # 성능 테스트
  performance-tests:
    name: 성능 테스트
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 애플리케이션 빌드
        run: npm run build

      - name: 성능 테스트 실행
        run: npm run test:performance
        env:
          NODE_ENV: test

      - name: 부하 테스트 실행
        run: npm run test:load
        continue-on-error: true

  # 빌드 검증
  build-verification:
    name: 빌드 검증
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [code-quality]
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 프로덕션 빌드
        run: npm run build

      - name: 빌드 아티팩트 검증
        run: |
          if [ ! -f "dist/index.js" ]; then
            echo "빌드 실패: dist/index.js 파일이 생성되지 않았습니다"
            exit 1
          fi
          echo "빌드 성공: 모든 필수 파일이 생성되었습니다"

      - name: 빌드 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 7

  # 전체 테스트 결과 요약
  test-summary:
    name: 테스트 결과 요약
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, build-verification]
    if: always()
    
    steps:
      - name: 테스트 결과 요약
        run: |
          echo "## 🧪 테스트 결과 요약" >> $GITHUB_STEP_SUMMARY
          echo "| 테스트 유형 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 단위 테스트 | ${{ needs.unit-tests.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 통합 테스트 | ${{ needs.integration-tests.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E 테스트 | ${{ needs.e2e-tests.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 빌드 검증 | ${{ needs.build-verification.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY