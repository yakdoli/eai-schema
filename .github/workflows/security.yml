name: 보안 스캔

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 매일 오전 2시 (UTC) 정기 보안 스캔
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # 의존성 취약점 스캔
  dependency-scan:
    name: 의존성 취약점 스캔
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: npm audit 실행
        run: |
          echo "## 📦 npm audit 결과" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # 취약점 요약 생성
          if [ -f "audit-results.json" ]; then
            VULNERABILITIES=$(node -p "
              const audit = JSON.parse(require('fs').readFileSync('audit-results.json', 'utf8'));
              const meta = audit.metadata || {};
              const vuln = meta.vulnerabilities || {};
              \`| 심각도 | 개수 |
|--------|------|
| Critical | \${vuln.critical || 0} |
| High | \${vuln.high || 0} |
| Moderate | \${vuln.moderate || 0} |
| Low | \${vuln.low || 0} |\`
            " 2>/dev/null || echo "audit 결과 파싱 실패")
            
            echo "$VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Snyk 보안 스캔
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true

      - name: Snyk 결과 업로드
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-results.json
        continue-on-error: true

      - name: 취약점 보고서 생성
        if: always()
        run: |
          echo "## 🔍 보안 스캔 결과" >> $GITHUB_STEP_SUMMARY
          echo "스캔 완료 시간: $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "snyk-results.json" ]; then
            echo "Snyk 스캔 결과가 생성되었습니다." >> $GITHUB_STEP_SUMMARY
          fi

  # 코드 보안 분석 (CodeQL)
  codeql-analysis:
    name: CodeQL 보안 분석
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: CodeQL 초기화
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: 자동 빌드
        uses: github/codeql-action/autobuild@v3

      - name: CodeQL 분석 실행
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # 시크릿 스캔
  secret-scan:
    name: 시크릿 스캔
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog 시크릿 스캔
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks 시크릿 스캔
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
        continue-on-error: true

  # 컨테이너 보안 스캔 (Docker 이미지가 있는 경우)
  container-scan:
    name: 컨테이너 보안 스캔
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Docker 이미지 빌드
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t eai-schema-toolkit:latest .
          else
            echo "Dockerfile이 없어 컨테이너 스캔을 건너뜁니다."
            exit 0
          fi

      - name: Trivy 컨테이너 스캔
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'eai-schema-toolkit:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Trivy 결과 업로드
        if: hashFiles('Dockerfile') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 라이센스 컴플라이언스 검사
  license-check:
    name: 라이센스 컴플라이언스
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치
        run: npm ci

      - name: 라이센스 검사
        run: |
          # license-checker 설치 및 실행
          npx license-checker --json --out licenses.json || true
          
          if [ -f "licenses.json" ]; then
            echo "## 📄 라이센스 검사 결과" >> $GITHUB_STEP_SUMMARY
            
            # 금지된 라이센스 확인
            FORBIDDEN_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0"
            
            node -e "
              const licenses = JSON.parse(require('fs').readFileSync('licenses.json', 'utf8'));
              const forbidden = '$FORBIDDEN_LICENSES'.split(',');
              let issues = [];
              
              Object.entries(licenses).forEach(([pkg, info]) => {
                if (forbidden.some(f => info.licenses && info.licenses.includes(f))) {
                  issues.push(\`- \${pkg}: \${info.licenses}\`);
                }
              });
              
              if (issues.length > 0) {
                console.log('❌ 금지된 라이센스 발견:');
                issues.forEach(issue => console.log(issue));
                process.exit(1);
              } else {
                console.log('✅ 라이센스 컴플라이언스 통과');
              }
            "
          fi

  # OWASP ZAP 동적 보안 테스트
  dynamic-security-test:
    name: 동적 보안 테스트
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      app:
        image: node:22-alpine
        ports:
          - 3000:3000
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: 의존성 설치 및 앱 시작
        run: |
          npm ci
          npm run build
          npm start &
          
          # 앱이 시작될 때까지 대기
          for i in {1..30}; do
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "앱이 시작되었습니다."
              break
            fi
            echo "앱 시작 대기 중... ($i/30)"
            sleep 2
          done

      - name: OWASP ZAP 베이스라인 스캔
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true

      - name: ZAP 결과 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
          retention-days: 7

  # 보안 스캔 결과 요약
  security-summary:
    name: 보안 스캔 요약
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, secret-scan, license-check]
    if: always()
    
    steps:
      - name: 보안 스캔 결과 요약
        run: |
          echo "## 🛡️ 보안 스캔 결과 요약" >> $GITHUB_STEP_SUMMARY
          echo "| 스캔 유형 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 의존성 취약점 | ${{ needs.dependency-scan.result == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL 분석 | ${{ needs.codeql-analysis.result == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 시크릿 스캔 | ${{ needs.secret-scan.result == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 라이센스 검사 | ${{ needs.license-check.result == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "스캔 완료 시간: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: 보안 이슈 알림
        if: needs.dependency-scan.result == 'failure' || needs.codeql-analysis.result == 'failure' || needs.secret-scan.result == 'failure'
        run: |
          echo "## ⚠️ 보안 이슈 발견" >> $GITHUB_STEP_SUMMARY
          echo "보안 스캔에서 문제가 발견되었습니다. 즉시 확인이 필요합니다." >> $GITHUB_STEP_SUMMARY
          echo "Security 탭에서 자세한 내용을 확인하세요." >> $GITHUB_STEP_SUMMARY