// EAI 스키마 변환 관련 타입 정의
import { 
  SchemaType, 
  UnifiedSchema, 
  AnySourceSchema,
  ConversionRule,
  ConversionWarning,
  ConversionImpact 
} from '@eai-toolkit/shared';

// EAI 스키마 모델
export interface EAISchema {
  version: string;
  metadata: EAISchemaMetadata;
  entities: EAIEntity[];
  operations: EAIOperation[];
  types: EAITypeDefinition[];
  bindings: EAIBinding[];
  extensions: Record<string, any>;
}

export interface EAISchemaMetadata {
  id: string;
  name: string;
  description?: string;
  namespace: string;
  version: string;
  sourceType: SchemaType;
  createdAt: Date;
  updatedAt: Date;
  tags: string[];
  annotations: EAIAnnotation[];
}

export interface EAIAnnotation {
  key: string;
  value: string;
  namespace?: string;
}

// EAI 엔티티 정의
export interface EAIEntity {
  id: string;
  name: string;
  namespace?: string;
  description?: string;
  properties: EAIProperty[];
  relationships: EAIRelationship[];
  constraints: EAIConstraint[];
  annotations: EAIAnnotation[];
  sourceMapping: SourceMapping;
}

export interface EAIProperty {
  name: string;
  type: string;
  isRequired: boolean;
  isArray: boolean;
  defaultValue?: any;
  constraints: EAIConstraint[];
  description?: string;
  annotations: EAIAnnotation[];
  sourceMapping: SourceMapping;
}

export interface EAIRelationship {
  name: string;
  type: RelationshipType;
  target: string;
  cardinality: Cardinality;
  description?: string;
  sourceMapping: SourceMapping;
}

export enum RelationshipType {
  ASSOCIATION = 'ASSOCIATION',
  COMPOSITION = 'COMPOSITION',
  AGGREGATION = 'AGGREGATION',
  INHERITANCE = 'INHERITANCE',
  DEPENDENCY = 'DEPENDENCY',
}

export enum Cardinality {
  ONE_TO_ONE = '1:1',
  ONE_TO_MANY = '1:N',
  MANY_TO_ONE = 'N:1',
  MANY_TO_MANY = 'N:N',
}

// EAI 오퍼레이션 정의
export interface EAIOperation {
  id: string;
  name: string;
  type: OperationType;
  description?: string;
  inputParameters: EAIParameter[];
  outputParameters: EAIParameter[];
  faults: EAIFault[];
  bindings: EAIBinding[];
  annotations: EAIAnnotation[];
  sourceMapping: SourceMapping;
}

export enum OperationType {
  REQUEST_RESPONSE = 'REQUEST_RESPONSE',
  ONE_WAY = 'ONE_WAY',
  NOTIFICATION = 'NOTIFICATION',
  SOLICIT_RESPONSE = 'SOLICIT_RESPONSE',
  CREATE = 'CREATE',
  READ = 'READ',
  UPDATE = 'UPDATE',
  DELETE = 'DELETE',
  QUERY = 'QUERY',
}

export interface EAIParameter {
  name: string;
  type: string;
  isRequired: boolean;
  isArray: boolean;
  direction: ParameterDirection;
  defaultValue?: any;
  constraints: EAIConstraint[];
  description?: string;
  sourceMapping: SourceMapping;
}

export enum ParameterDirection {
  IN = 'IN',
  OUT = 'OUT',
  INOUT = 'INOUT',
}

export interface EAIFault {
  name: string;
  type: string;
  description?: string;
  sourceMapping: SourceMapping;
}

// EAI 타입 정의
export interface EAITypeDefinition {
  name: string;
  namespace?: string;
  baseType?: string;
  category: TypeCategory;
  properties?: EAIProperty[];
  restrictions: EAIRestriction[];
  facets: EAIFacet[];
  description?: string;
  annotations: EAIAnnotation[];
  sourceMapping: SourceMapping;
}

export enum TypeCategory {
  PRIMITIVE = 'PRIMITIVE',
  COMPLEX = 'COMPLEX',
  SIMPLE = 'SIMPLE',
  ENUMERATION = 'ENUMERATION',
  UNION = 'UNION',
  LIST = 'LIST',
}

export interface EAIRestriction {
  type: RestrictionType;
  value: any;
  description?: string;
}

export enum RestrictionType {
  MIN_LENGTH = 'MIN_LENGTH',
  MAX_LENGTH = 'MAX_LENGTH',
  PATTERN = 'PATTERN',
  MIN_INCLUSIVE = 'MIN_INCLUSIVE',
  MAX_INCLUSIVE = 'MAX_INCLUSIVE',
  MIN_EXCLUSIVE = 'MIN_EXCLUSIVE',
  MAX_EXCLUSIVE = 'MAX_EXCLUSIVE',
  ENUMERATION = 'ENUMERATION',
  WHITE_SPACE = 'WHITE_SPACE',
  TOTAL_DIGITS = 'TOTAL_DIGITS',
  FRACTION_DIGITS = 'FRACTION_DIGITS',
}

export interface EAIFacet {
  name: string;
  value: any;
  fixed: boolean;
}

// EAI 바인딩 정의
export interface EAIBinding {
  id: string;
  name: string;
  type: BindingType;
  protocol: string;
  endpoint?: string;
  configuration: Record<string, any>;
  security?: SecurityConfiguration;
  sourceMapping: SourceMapping;
}

export enum BindingType {
  SOAP = 'SOAP',
  HTTP = 'HTTP',
  REST = 'REST',
  JMS = 'JMS',
  FILE = 'FILE',
  DATABASE = 'DATABASE',
  SAP_RFC = 'SAP_RFC',
  SAP_IDOC = 'SAP_IDOC',
  SAP_ODATA = 'SAP_ODATA',
}

export interface SecurityConfiguration {
  type: SecurityType;
  configuration: Record<string, any>;
}

export enum SecurityType {
  NONE = 'NONE',
  BASIC = 'BASIC',
  DIGEST = 'DIGEST',
  OAUTH = 'OAUTH',
  JWT = 'JWT',
  CERTIFICATE = 'CERTIFICATE',
  KERBEROS = 'KERBEROS',
}

// EAI 제약조건
export interface EAIConstraint {
  type: ConstraintType;
  expression: string;
  message?: string;
  severity: ConstraintSeverity;
}

export enum ConstraintType {
  VALIDATION = 'VALIDATION',
  BUSINESS_RULE = 'BUSINESS_RULE',
  REFERENTIAL_INTEGRITY = 'REFERENTIAL_INTEGRITY',
  UNIQUENESS = 'UNIQUENESS',
  CONDITIONAL = 'CONDITIONAL',
}

export enum ConstraintSeverity {
  ERROR = 'ERROR',
  WARNING = 'WARNING',
  INFO = 'INFO',
}

// 소스 매핑 정보
export interface SourceMapping {
  sourceType: SchemaType;
  sourcePath: string;
  sourceElement: string;
  transformationRules: string[];
  confidence: number; // 0-100, 매핑 신뢰도
}

// 변환 컨텍스트
export interface ConversionContext {
  sourceSchema: AnySourceSchema;
  targetType: SchemaType;
  options: ConversionOptions;
  rules: ConversionRule[];
  customRules: CustomConversionRule[];
  namespaceMap: Map<string, string>;
  typeMap: Map<string, string>;
  warnings: ConversionWarning[];
  statistics: ConversionStatistics;
}

export interface ConversionOptions {
  preserveNamespaces: boolean;
  generateIds: boolean;
  includeDocumentation: boolean;
  includeAnnotations: boolean;
  strictMode: boolean;
  customTypeMapping: Record<string, string>;
  excludePatterns: string[];
  includePatterns: string[];
  maxDepth: number;
  enableOptimizations: boolean;
}

export interface CustomConversionRule {
  id: string;
  name: string;
  description: string;
  sourcePattern: RegExp;
  targetTemplate: string;
  condition?: (element: any, context: ConversionContext) => boolean;
  transformer: (element: any, context: ConversionContext) => any;
  priority: number;
  enabled: boolean;
}

export interface ConversionStatistics {
  totalElements: number;
  convertedElements: number;
  skippedElements: number;
  errorElements: number;
  warningElements: number;
  processingTime: number;
  memoryUsage: number;
  rulesApplied: Map<string, number>;
}

// 변환 결과
export interface ConversionResult {
  success: boolean;
  eaiSchema?: EAISchema;
  errors: ConversionError[];
  warnings: ConversionWarning[];
  statistics: ConversionStatistics;
  metadata: ConversionResultMetadata;
}

export interface ConversionError {
  code: string;
  message: string;
  sourcePath: string;
  sourceElement?: string;
  details?: any;
  recoverable: boolean;
}

export interface ConversionResultMetadata {
  conversionId: string;
  sourceType: SchemaType;
  targetType: SchemaType;
  startTime: Date;
  endTime: Date;
  duration: number;
  rulesVersion: string;
  engineVersion: string;
}

// 변환 엔진 인터페이스
export interface SchemaConverter {
  convert(schema: AnySourceSchema, context: ConversionContext): Promise<ConversionResult>;
  getSupportedSourceTypes(): SchemaType[];
  getDefaultOptions(): ConversionOptions;
  validateInput(schema: AnySourceSchema): Promise<boolean>;
}

// 변환 규칙 엔진 인터페이스
export interface ConversionRuleEngine {
  loadRules(rules: ConversionRule[]): void;
  addCustomRule(rule: CustomConversionRule): void;
  removeCustomRule(ruleId: string): void;
  applyRules(element: any, context: ConversionContext): any;
  getRules(): ConversionRule[];
  getCustomRules(): CustomConversionRule[];
}

// 변환 매니저 인터페이스
export interface ConversionManager {
  registerConverter(type: SchemaType, converter: SchemaConverter): void;
  unregisterConverter(type: SchemaType): void;
  getConverter(type: SchemaType): SchemaConverter | undefined;
  convert(schema: AnySourceSchema, options?: Partial<ConversionOptions>): Promise<ConversionResult>;
  getSupportedConversions(): SchemaType[];
}