// OpenAPI 스키마 타입 정의
import { BaseSchema, SchemaType, Operation, ValidationResult } from './index';

export interface OpenAPISchema extends BaseSchema {
  type: SchemaType.OPENAPI;
  content: OpenAPIContent;
}

export interface OpenAPIContent {
  openapi: string;
  info: OpenAPIInfo;
  servers?: OpenAPIServer[];
  paths: OpenAPIPaths;
  components?: OpenAPIComponents;
  security?: OpenAPISecurityRequirement[];
  tags?: OpenAPITag[];
  externalDocs?: OpenAPIExternalDocumentation;
}

export interface OpenAPIInfo {
  title: string;
  description?: string;
  termsOfService?: string;
  contact?: OpenAPIContact;
  license?: OpenAPILicense;
  version: string;
}

export interface OpenAPIContact {
  name?: string;
  url?: string;
  email?: string;
}

export interface OpenAPILicense {
  name: string;
  url?: string;
}

export interface OpenAPIServer {
  url: string;
  description?: string;
  variables?: Record<string, OpenAPIServerVariable>;
}

export interface OpenAPIServerVariable {
  enum?: string[];
  default: string;
  description?: string;
}

export interface OpenAPIPaths {
  [path: string]: OpenAPIPathItem;
}

export interface OpenAPIPathItem {
  $ref?: string;
  summary?: string;
  description?: string;
  get?: OpenAPIOperation;
  put?: OpenAPIOperation;
  post?: OpenAPIOperation;
  delete?: OpenAPIOperation;
  options?: OpenAPIOperation;
  head?: OpenAPIOperation;
  patch?: OpenAPIOperation;
  trace?: OpenAPIOperation;
  servers?: OpenAPIServer[];
  parameters?: OpenAPIParameter[];
}

export interface OpenAPIOperation extends Operation {
  tags?: string[];
  summary?: string;
  description?: string;
  externalDocs?: OpenAPIExternalDocumentation;
  operationId?: string;
  parameters?: OpenAPIParameter[];
  requestBody?: OpenAPIRequestBody;
  responses: OpenAPIResponses;
  callbacks?: Record<string, OpenAPICallback>;
  deprecated?: boolean;
  security?: OpenAPISecurityRequirement[];
  servers?: OpenAPIServer[];
}

export interface OpenAPIParameter {
  name: string;
  in: OpenAPIParameterLocation;
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: OpenAPIParameterStyle;
  explode?: boolean;
  allowReserved?: boolean;
  schema?: OpenAPISchemaObject;
  example?: any;
  examples?: Record<string, OpenAPIExample>;
  content?: Record<string, OpenAPIMediaType>;
}

export enum OpenAPIParameterLocation {
  QUERY = 'query',
  HEADER = 'header',
  PATH = 'path',
  COOKIE = 'cookie',
}

export enum OpenAPIParameterStyle {
  MATRIX = 'matrix',
  LABEL = 'label',
  FORM = 'form',
  SIMPLE = 'simple',
  SPACE_DELIMITED = 'spaceDelimited',
  PIPE_DELIMITED = 'pipeDelimited',
  DEEP_OBJECT = 'deepObject',
}

export interface OpenAPIRequestBody {
  description?: string;
  content: Record<string, OpenAPIMediaType>;
  required?: boolean;
}

export interface OpenAPIMediaType {
  schema?: OpenAPISchemaObject;
  example?: any;
  examples?: Record<string, OpenAPIExample>;
  encoding?: Record<string, OpenAPIEncoding>;
}

export interface OpenAPIEncoding {
  contentType?: string;
  headers?: Record<string, OpenAPIHeader>;
  style?: OpenAPIParameterStyle;
  explode?: boolean;
  allowReserved?: boolean;
}

export interface OpenAPIResponses {
  [statusCode: string]: OpenAPIResponse;
}

export interface OpenAPIResponse {
  description: string;
  headers?: Record<string, OpenAPIHeader>;
  content?: Record<string, OpenAPIMediaType>;
  links?: Record<string, OpenAPILink>;
}

export interface OpenAPIHeader {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: OpenAPIParameterStyle;
  explode?: boolean;
  allowReserved?: boolean;
  schema?: OpenAPISchemaObject;
  example?: any;
  examples?: Record<string, OpenAPIExample>;
  content?: Record<string, OpenAPIMediaType>;
}

export interface OpenAPILink {
  operationRef?: string;
  operationId?: string;
  parameters?: Record<string, any>;
  requestBody?: any;
  description?: string;
  server?: OpenAPIServer;
}

export interface OpenAPICallback {
  [expression: string]: OpenAPIPathItem;
}

export interface OpenAPIComponents {
  schemas?: Record<string, OpenAPISchemaObject>;
  responses?: Record<string, OpenAPIResponse>;
  parameters?: Record<string, OpenAPIParameter>;
  examples?: Record<string, OpenAPIExample>;
  requestBodies?: Record<string, OpenAPIRequestBody>;
  headers?: Record<string, OpenAPIHeader>;
  securitySchemes?: Record<string, OpenAPISecurityScheme>;
  links?: Record<string, OpenAPILink>;
  callbacks?: Record<string, OpenAPICallback>;
}

export interface OpenAPISchemaObject {
  // JSON Schema Core
  $id?: string;
  $schema?: string;
  $ref?: string;
  $comment?: string;
  
  // JSON Schema Validation
  title?: string;
  description?: string;
  default?: any;
  examples?: any[];
  
  // Type
  type?: OpenAPIDataType | OpenAPIDataType[];
  enum?: any[];
  const?: any;
  
  // Numeric
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: number;
  minimum?: number;
  exclusiveMinimum?: number;
  
  // String
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  format?: string;
  
  // Array
  items?: OpenAPISchemaObject | OpenAPISchemaObject[];
  additionalItems?: OpenAPISchemaObject;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  contains?: OpenAPISchemaObject;
  
  // Object
  maxProperties?: number;
  minProperties?: number;
  required?: string[];
  properties?: Record<string, OpenAPISchemaObject>;
  patternProperties?: Record<string, OpenAPISchemaObject>;
  additionalProperties?: boolean | OpenAPISchemaObject;
  dependencies?: Record<string, OpenAPISchemaObject | string[]>;
  propertyNames?: OpenAPISchemaObject;
  
  // Conditional
  if?: OpenAPISchemaObject;
  then?: OpenAPISchemaObject;
  else?: OpenAPISchemaObject;
  
  // Composition
  allOf?: OpenAPISchemaObject[];
  anyOf?: OpenAPISchemaObject[];
  oneOf?: OpenAPISchemaObject[];
  not?: OpenAPISchemaObject;
  
  // OpenAPI specific
  nullable?: boolean;
  discriminator?: OpenAPIDiscriminator;
  readOnly?: boolean;
  writeOnly?: boolean;
  xml?: OpenAPIXML;
  externalDocs?: OpenAPIExternalDocumentation;
  example?: any;
  deprecated?: boolean;
}

export enum OpenAPIDataType {
  NULL = 'null',
  BOOLEAN = 'boolean',
  OBJECT = 'object',
  ARRAY = 'array',
  NUMBER = 'number',
  STRING = 'string',
  INTEGER = 'integer',
}

export interface OpenAPIDiscriminator {
  propertyName: string;
  mapping?: Record<string, string>;
}

export interface OpenAPIXML {
  name?: string;
  namespace?: string;
  prefix?: string;
  attribute?: boolean;
  wrapped?: boolean;
}

export interface OpenAPIExample {
  summary?: string;
  description?: string;
  value?: any;
  externalValue?: string;
}

export interface OpenAPISecurityScheme {
  type: OpenAPISecuritySchemeType;
  description?: string;
  name?: string;
  in?: OpenAPISecuritySchemeIn;
  scheme?: string;
  bearerFormat?: string;
  flows?: OpenAPIOAuthFlows;
  openIdConnectUrl?: string;
}

export enum OpenAPISecuritySchemeType {
  API_KEY = 'apiKey',
  HTTP = 'http',
  OAUTH2 = 'oauth2',
  OPEN_ID_CONNECT = 'openIdConnect',
}

export enum OpenAPISecuritySchemeIn {
  QUERY = 'query',
  HEADER = 'header',
  COOKIE = 'cookie',
}

export interface OpenAPIOAuthFlows {
  implicit?: OpenAPIOAuthFlow;
  password?: OpenAPIOAuthFlow;
  clientCredentials?: OpenAPIOAuthFlow;
  authorizationCode?: OpenAPIOAuthFlow;
}

export interface OpenAPIOAuthFlow {
  authorizationUrl?: string;
  tokenUrl?: string;
  refreshUrl?: string;
  scopes: Record<string, string>;
}

export interface OpenAPISecurityRequirement {
  [name: string]: string[];
}

export interface OpenAPITag {
  name: string;
  description?: string;
  externalDocs?: OpenAPIExternalDocumentation;
}

export interface OpenAPIExternalDocumentation {
  description?: string;
  url: string;
}

// OpenAPI 파싱 관련 타입
export interface OpenAPIParseOptions {
  resolveReferences: boolean;
  validateSchema: boolean;
  dereferenceComponents: boolean;
  maxDepth: number;
  timeout: number;
}

export interface OpenAPIParseResult {
  schema: OpenAPISchema;
  validation: ValidationResult;
  metadata: OpenAPIParseMetadata;
}

export interface OpenAPIParseMetadata {
  version: string;
  pathCount: number;
  operationCount: number;
  schemaCount: number;
  componentCount: number;
  externalReferences: string[];
}

// OpenAPI 검증 관련 타입
export interface OpenAPIValidationOptions {
  checkReferences: boolean;
  validateExamples: boolean;
  checkSecurity: boolean;
  strictMode: boolean;
}

export interface OpenAPIValidationError {
  code: OpenAPIErrorCode;
  message: string;
  path: string;
  line?: number;
  column?: number;
  severity: 'error' | 'warning' | 'info';
}

export enum OpenAPIErrorCode {
  INVALID_REFERENCE = 'INVALID_REFERENCE',
  MISSING_REQUIRED_PROPERTY = 'MISSING_REQUIRED_PROPERTY',
  INVALID_SCHEMA = 'INVALID_SCHEMA',
  INVALID_EXAMPLE = 'INVALID_EXAMPLE',
  SECURITY_SCHEME_NOT_FOUND = 'SECURITY_SCHEME_NOT_FOUND',
  INVALID_OPERATION_ID = 'INVALID_OPERATION_ID',
  DUPLICATE_OPERATION_ID = 'DUPLICATE_OPERATION_ID',
  INVALID_PATH_PARAMETER = 'INVALID_PATH_PARAMETER',
}

// OpenAPI 변환 관련 타입
export interface OpenAPIConversionOptions {
  targetVersion?: string;
  preserveExamples: boolean;
  includeDeprecated: boolean;
  generateOperationIds: boolean;
}

export interface OpenAPIToEAIMapping {
  paths: PathMapping[];
  operations: OpenAPIOperationMapping[];
  schemas: OpenAPISchemaMapping[];
  components: ComponentMapping[];
}

export interface PathMapping {
  openApiPath: string;
  eaiEntity: string;
  operations: string[];
}

export interface OpenAPIOperationMapping {
  openApiOperation: string;
  eaiOperation: string;
  method: string;
  parameters: ParameterMapping[];
  requestBody?: RequestBodyMapping;
  responses: ResponseMapping[];
}

export interface ParameterMapping {
  openApiParameter: string;
  eaiParameter: string;
  location: OpenAPIParameterLocation;
  transformation?: string;
}

export interface RequestBodyMapping {
  openApiRequestBody: string;
  eaiType: string;
  contentType: string;
}

export interface ResponseMapping {
  statusCode: string;
  openApiResponse: string;
  eaiType: string;
  contentType?: string;
}

export interface OpenAPISchemaMapping {
  openApiSchema: string;
  eaiType: string;
  propertyMappings: OpenAPIPropertyMapping[];
}

export interface OpenAPIPropertyMapping {
  openApiProperty: string;
  eaiProperty: string;
  transformation?: string;
}

export interface ComponentMapping {
  openApiComponent: string;
  eaiComponent: string;
  type: string;
}