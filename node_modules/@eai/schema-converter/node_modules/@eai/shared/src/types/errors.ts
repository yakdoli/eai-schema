// 에러 및 검증 결과 타입 정의
import { SchemaType } from './index';

// 기본 에러 타입
export interface BaseError {
  id: string;
  code: string;
  message: string;
  timestamp: Date;
  context?: ErrorContext;
  stack?: string;
}

export interface ErrorContext {
  schemaType?: SchemaType;
  fileName?: string;
  filePath?: string;
  line?: number;
  column?: number;
  xpath?: string;
  jsonPath?: string;
  namespace?: string;
  element?: string;
  attribute?: string;
}

// 에러 심각도
export enum ErrorSeverity {
  CRITICAL = 'CRITICAL',
  ERROR = 'ERROR',
  WARNING = 'WARNING',
  INFO = 'INFO',
  DEBUG = 'DEBUG',
}

// 에러 카테고리
export enum ErrorCategory {
  PARSING = 'PARSING',
  VALIDATION = 'VALIDATION',
  CONVERSION = 'CONVERSION',
  MAPPING = 'MAPPING',
  COMPARISON = 'COMPARISON',
  NETWORK = 'NETWORK',
  FILE_SYSTEM = 'FILE_SYSTEM',
  SECURITY = 'SECURITY',
  CONFIGURATION = 'CONFIGURATION',
  SYSTEM = 'SYSTEM',
}

// 파싱 에러
export interface ParsingError extends BaseError {
  category: ErrorCategory.PARSING;
  severity: ErrorSeverity;
  sourceType: SchemaType;
  parsePhase: ParsePhase;
  recoverable: boolean;
  suggestions?: string[];
}

export enum ParsePhase {
  LEXICAL_ANALYSIS = 'LEXICAL_ANALYSIS',
  SYNTAX_ANALYSIS = 'SYNTAX_ANALYSIS',
  SEMANTIC_ANALYSIS = 'SEMANTIC_ANALYSIS',
  REFERENCE_RESOLUTION = 'REFERENCE_RESOLUTION',
  TYPE_CHECKING = 'TYPE_CHECKING',
  VALIDATION = 'VALIDATION',
}

// 검증 에러
export interface ValidationError extends BaseError {
  category: ErrorCategory.VALIDATION;
  severity: ErrorSeverity;
  validationType: ValidationType;
  constraint: string;
  expectedValue?: any;
  actualValue?: any;
  fixable: boolean;
  autoFixSuggestion?: string;
}

export enum ValidationType {
  SYNTAX = 'SYNTAX',
  SEMANTIC = 'SEMANTIC',
  REFERENCE_INTEGRITY = 'REFERENCE_INTEGRITY',
  TYPE_COMPATIBILITY = 'TYPE_COMPATIBILITY',
  CONSTRAINT_VIOLATION = 'CONSTRAINT_VIOLATION',
  NAMESPACE_VALIDATION = 'NAMESPACE_VALIDATION',
  SCHEMA_COMPLIANCE = 'SCHEMA_COMPLIANCE',
  BUSINESS_RULE = 'BUSINESS_RULE',
}

// 변환 에러
export interface ConversionError extends BaseError {
  category: ErrorCategory.CONVERSION;
  severity: ErrorSeverity;
  sourceType: SchemaType;
  targetType: SchemaType;
  conversionPhase: ConversionPhase;
  unsupportedFeatures?: string[];
  partialResult?: any;
}

export enum ConversionPhase {
  PRE_PROCESSING = 'PRE_PROCESSING',
  TYPE_MAPPING = 'TYPE_MAPPING',
  STRUCTURE_TRANSFORMATION = 'STRUCTURE_TRANSFORMATION',
  CONSTRAINT_MAPPING = 'CONSTRAINT_MAPPING',
  POST_PROCESSING = 'POST_PROCESSING',
  VALIDATION = 'VALIDATION',
}

// 매핑 에러
export interface MappingError extends BaseError {
  category: ErrorCategory.MAPPING;
  severity: ErrorSeverity;
  mappingType: MappingType;
  sourcePath: string;
  targetPath: string;
  incompatibilityReason: string;
}

export enum MappingType {
  FIELD_MAPPING = 'FIELD_MAPPING',
  TYPE_MAPPING = 'TYPE_MAPPING',
  CONSTRAINT_MAPPING = 'CONSTRAINT_MAPPING',
  TRANSFORMATION_MAPPING = 'TRANSFORMATION_MAPPING',
}

// 비교 에러
export interface ComparisonError extends BaseError {
  category: ErrorCategory.COMPARISON;
  severity: ErrorSeverity;
  comparisonType: ComparisonType;
  schema1Path: string;
  schema2Path: string;
  conflictReason: string;
}

export enum ComparisonType {
  STRUCTURE_COMPARISON = 'STRUCTURE_COMPARISON',
  TYPE_COMPARISON = 'TYPE_COMPARISON',
  CONSTRAINT_COMPARISON = 'CONSTRAINT_COMPARISON',
  SEMANTIC_COMPARISON = 'SEMANTIC_COMPARISON',
}

// 네트워크 에러
export interface NetworkError extends BaseError {
  category: ErrorCategory.NETWORK;
  severity: ErrorSeverity;
  url: string;
  httpStatus?: number;
  timeout: boolean;
  retryable: boolean;
  retryCount?: number;
}

// 파일 시스템 에러
export interface FileSystemError extends BaseError {
  category: ErrorCategory.FILE_SYSTEM;
  severity: ErrorSeverity;
  operation: FileOperation;
  path: string;
  permissions?: string;
  diskSpace?: number;
}

export enum FileOperation {
  READ = 'READ',
  WRITE = 'WRITE',
  DELETE = 'DELETE',
  CREATE = 'CREATE',
  MOVE = 'MOVE',
  COPY = 'COPY',
}

// 보안 에러
export interface SecurityError extends BaseError {
  category: ErrorCategory.SECURITY;
  severity: ErrorSeverity;
  securityType: SecurityType;
  threatLevel: ThreatLevel;
  blocked: boolean;
}

export enum SecurityType {
  XXE_ATTACK = 'XXE_ATTACK',
  SSRF_ATTACK = 'SSRF_ATTACK',
  FILE_UPLOAD_VIOLATION = 'FILE_UPLOAD_VIOLATION',
  SIZE_LIMIT_EXCEEDED = 'SIZE_LIMIT_EXCEEDED',
  MALICIOUS_CONTENT = 'MALICIOUS_CONTENT',
  UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS',
}

export enum ThreatLevel {
  LOW = 'LOW',
  MEDIUM = 'MEDIUM',
  HIGH = 'HIGH',
  CRITICAL = 'CRITICAL',
}

// 설정 에러
export interface ConfigurationError extends BaseError {
  category: ErrorCategory.CONFIGURATION;
  severity: ErrorSeverity;
  configKey: string;
  configValue?: any;
  expectedType?: string;
  validValues?: any[];
}

// 시스템 에러
export interface SystemError extends BaseError {
  category: ErrorCategory.SYSTEM;
  severity: ErrorSeverity;
  systemComponent: string;
  resourceType?: ResourceType;
  resourceUsage?: ResourceUsage;
}

export enum ResourceType {
  MEMORY = 'MEMORY',
  CPU = 'CPU',
  DISK = 'DISK',
  NETWORK = 'NETWORK',
  DATABASE = 'DATABASE',
}

export interface ResourceUsage {
  current: number;
  maximum: number;
  unit: string;
  threshold?: number;
}

// 에러 집합 타입
export type ApplicationError = 
  | ParsingError 
  | ValidationError 
  | ConversionError 
  | MappingError 
  | ComparisonError 
  | NetworkError 
  | FileSystemError 
  | SecurityError 
  | ConfigurationError 
  | SystemError;

// 검증 결과 타입
export interface ValidationResult {
  isValid: boolean;
  score: number; // 0-100 점수
  errors: ValidationError[];
  warnings: ValidationError[];
  infos: ValidationError[];
  summary: ValidationSummary;
  details: ValidationDetails;
}

export interface ValidationSummary {
  totalIssues: number;
  criticalIssues: number;
  errorCount: number;
  warningCount: number;
  infoCount: number;
  passedChecks: number;
  totalChecks: number;
  validationTime: number;
}

export interface ValidationDetails {
  checkedRules: ValidationRule[];
  skippedRules: ValidationRule[];
  failedRules: ValidationRule[];
  performanceMetrics: PerformanceMetrics;
}

export interface ValidationRule {
  id: string;
  name: string;
  description: string;
  category: ValidationType;
  severity: ErrorSeverity;
  enabled: boolean;
  executionTime?: number;
  result?: ValidationRuleResult;
}

export enum ValidationRuleResult {
  PASSED = 'PASSED',
  FAILED = 'FAILED',
  SKIPPED = 'SKIPPED',
  ERROR = 'ERROR',
}

export interface PerformanceMetrics {
  totalTime: number;
  parseTime: number;
  validationTime: number;
  memoryUsage: number;
  peakMemoryUsage: number;
  cpuUsage: number;
}

// 에러 리포트 타입
export interface ErrorReport {
  id: string;
  title: string;
  summary: ErrorSummary;
  errors: ApplicationError[];
  generatedAt: Date;
  context: ReportContext;
  recommendations: Recommendation[];
}

export interface ErrorSummary {
  totalErrors: number;
  errorsByCategory: Record<ErrorCategory, number>;
  errorsBySeverity: Record<ErrorSeverity, number>;
  criticalErrors: ApplicationError[];
  mostFrequentErrors: ErrorFrequency[];
}

export interface ErrorFrequency {
  errorCode: string;
  count: number;
  percentage: number;
  examples: ApplicationError[];
}

export interface ReportContext {
  schemaType?: SchemaType;
  fileName?: string;
  fileSize?: number;
  processingTime?: number;
  environment: string;
  version: string;
}

export interface Recommendation {
  id: string;
  type: RecommendationType;
  priority: RecommendationPriority;
  title: string;
  description: string;
  action: string;
  relatedErrors: string[];
  estimatedEffort: string;
  impact: string;
}

export enum RecommendationType {
  FIX = 'FIX',
  IMPROVEMENT = 'IMPROVEMENT',
  BEST_PRACTICE = 'BEST_PRACTICE',
  PERFORMANCE = 'PERFORMANCE',
  SECURITY = 'SECURITY',
}

export enum RecommendationPriority {
  CRITICAL = 'CRITICAL',
  HIGH = 'HIGH',
  MEDIUM = 'MEDIUM',
  LOW = 'LOW',
}

// 에러 핸들링 전략
export interface ErrorHandlingStrategy {
  category: ErrorCategory;
  severity: ErrorSeverity;
  action: ErrorAction;
  retryPolicy?: RetryPolicy;
  fallbackStrategy?: FallbackStrategy;
  notificationRequired: boolean;
}

export enum ErrorAction {
  FAIL_FAST = 'FAIL_FAST',
  CONTINUE = 'CONTINUE',
  RETRY = 'RETRY',
  FALLBACK = 'FALLBACK',
  IGNORE = 'IGNORE',
  LOG_ONLY = 'LOG_ONLY',
}

export interface RetryPolicy {
  maxRetries: number;
  retryDelay: number;
  backoffMultiplier: number;
  maxDelay: number;
  retryableErrors: string[];
}

export interface FallbackStrategy {
  type: FallbackType;
  configuration: Record<string, any>;
}

export enum FallbackType {
  DEFAULT_VALUE = 'DEFAULT_VALUE',
  SKIP_ELEMENT = 'SKIP_ELEMENT',
  PARTIAL_PROCESSING = 'PARTIAL_PROCESSING',
  ALTERNATIVE_PARSER = 'ALTERNATIVE_PARSER',
  MANUAL_INTERVENTION = 'MANUAL_INTERVENTION',
}

// 에러 컨텍스트 빌더
export interface ErrorContextBuilder {
  withSchemaType(schemaType: SchemaType): ErrorContextBuilder;
  withFile(fileName: string, filePath?: string): ErrorContextBuilder;
  withPosition(line: number, column: number): ErrorContextBuilder;
  withPath(xpath?: string, jsonPath?: string): ErrorContextBuilder;
  withElement(namespace: string, element: string): ErrorContextBuilder;
  withAttribute(attribute: string): ErrorContextBuilder;
  build(): ErrorContext;
}

// 에러 수집기
export interface ErrorCollector {
  addError(error: ApplicationError): void;
  addErrors(errors: ApplicationError[]): void;
  getErrors(): ApplicationError[];
  getErrorsByCategory(category: ErrorCategory): ApplicationError[];
  getErrorsBySeverity(severity: ErrorSeverity): ApplicationError[];
  hasErrors(): boolean;
  hasCriticalErrors(): boolean;
  clear(): void;
  generateReport(): ErrorReport;
}