import { BaseSchema, SchemaType, Binding, ValidationResult, OperationType } from './index';
export interface WSDLSchema extends BaseSchema {
    type: SchemaType.WSDL;
    content: WSDLContent;
}
export interface WSDLContent {
    definitions: WSDLDefinitions;
    services: WSDLService[];
    bindings: WSDLBinding[];
    portTypes: WSDLPortType[];
    messages: WSDLMessage[];
    types: WSDLTypes;
}
export interface WSDLDefinitions {
    name: string;
    targetNamespace: string;
    xmlns: Record<string, string>;
    elementFormDefault?: string;
    attributeFormDefault?: string;
}
export interface WSDLService {
    name: string;
    documentation?: string;
    ports: WSDLPort[];
}
export interface WSDLPort {
    name: string;
    binding: string;
    address: WSDLAddress;
}
export interface WSDLAddress {
    location: string;
    type: WSDLAddressType;
}
export declare enum WSDLAddressType {
    SOAP = "soap:address",
    HTTP = "http:address",
    MIME = "mime:address"
}
export interface WSDLBinding extends Binding {
    portType: string;
    style?: WSDLStyle;
    transport: string;
    operations: WSDLBindingOperation[];
}
export declare enum WSDLStyle {
    DOCUMENT = "document",
    RPC = "rpc"
}
export interface WSDLBindingOperation {
    name: string;
    soapAction?: string;
    style?: WSDLStyle;
    use?: WSDLUse;
    input?: WSDLBindingMessage;
    output?: WSDLBindingMessage;
    faults?: WSDLBindingFault[];
}
export declare enum WSDLUse {
    LITERAL = "literal",
    ENCODED = "encoded"
}
export interface WSDLBindingMessage {
    use?: WSDLUse;
    encodingStyle?: string;
    namespace?: string;
    parts?: WSDLBindingPart[];
}
export interface WSDLBindingPart {
    name: string;
    element?: string;
    type?: string;
}
export interface WSDLBindingFault {
    name: string;
    use?: WSDLUse;
    encodingStyle?: string;
    namespace?: string;
}
export interface WSDLPortType {
    name: string;
    documentation?: string;
    operations: WSDLOperation[];
}
export interface WSDLOperation {
    name: string;
    type: OperationType;
    parameterOrder?: string;
    input?: WSDLOperationMessage;
    output?: WSDLOperationMessage;
    faults?: WSDLOperationFault[];
    documentation?: string;
}
export interface WSDLOperationMessage {
    name?: string;
    message: string;
    documentation?: string;
}
export interface WSDLOperationFault {
    name: string;
    message: string;
    documentation?: string;
}
export interface WSDLMessage {
    name: string;
    documentation?: string;
    parts: WSDLMessagePart[];
}
export interface WSDLMessagePart {
    name: string;
    element?: string;
    type?: string;
    documentation?: string;
}
export interface WSDLTypes {
    schemas: WSDLSchema[];
    imports: WSDLImport[];
}
export interface WSDLImport {
    namespace: string;
    location: string;
}
export interface WSDLParseOptions {
    resolveExternalReferences: boolean;
    validateSchema: boolean;
    ignoreBaseNamespaces: boolean;
    maxDepth: number;
    timeout: number;
}
export interface WSDLParseResult {
    schema: WSDLSchema;
    validation: ValidationResult;
    metadata: WSDLParseMetadata;
}
export interface WSDLParseMetadata {
    version: WSDLVersion;
    serviceCount: number;
    operationCount: number;
    messageCount: number;
    bindingCount: number;
    externalReferences: string[];
    namespaces: string[];
}
export declare enum WSDLVersion {
    WSDL_1_1 = "1.1",
    WSDL_2_0 = "2.0"
}
export interface WSDLValidationOptions {
    checkReferences: boolean;
    validateBindings: boolean;
    checkNamespaces: boolean;
    strictMode: boolean;
}
export interface WSDLValidationError {
    code: WSDLErrorCode;
    message: string;
    path: string;
    line?: number;
    column?: number;
    severity: 'error' | 'warning' | 'info';
}
export declare enum WSDLErrorCode {
    INVALID_NAMESPACE = "INVALID_NAMESPACE",
    MISSING_REFERENCE = "MISSING_REFERENCE",
    INVALID_BINDING = "INVALID_BINDING",
    DUPLICATE_DEFINITION = "DUPLICATE_DEFINITION",
    INVALID_OPERATION = "INVALID_OPERATION",
    MISSING_MESSAGE = "MISSING_MESSAGE",
    INVALID_PORT_TYPE = "INVALID_PORT_TYPE",
    CIRCULAR_REFERENCE = "CIRCULAR_REFERENCE"
}
export interface WSDLConversionOptions {
    targetVersion?: WSDLVersion;
    preserveComments: boolean;
    optimizeStructure: boolean;
    includeDocumentation: boolean;
}
export interface WSDLToEAIMapping {
    services: WSDLServiceMapping[];
    operations: WSDLOperationMapping[];
    messages: WSDLMessageMapping[];
    types: WSDLTypeMapping[];
}
export interface WSDLServiceMapping {
    wsdlService: string;
    eaiEntity: string;
    mappingRules: string[];
}
export interface WSDLOperationMapping {
    wsdlOperation: string;
    eaiOperation: string;
    inputMapping: WSDLMessageMapping;
    outputMapping: WSDLMessageMapping;
}
export interface WSDLMessageMapping {
    wsdlMessage: string;
    eaiType: string;
    fieldMappings: WSDLFieldMapping[];
}
export interface WSDLFieldMapping {
    wsdlField: string;
    eaiField: string;
    transformation?: string;
}
export interface WSDLTypeMapping {
    wsdlType: string;
    eaiType: string;
    conversionRule: string;
}
//# sourceMappingURL=wsdl.d.ts.map