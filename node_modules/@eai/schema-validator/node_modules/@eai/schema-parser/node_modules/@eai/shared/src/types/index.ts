// 스키마 타입 정의
export enum SchemaType {
  WSDL = 'WSDL',
  XSD = 'XSD',
  JSON_SCHEMA = 'JSON_SCHEMA',
  OPENAPI = 'OPENAPI',
  SAP_ODATA = 'SAP_ODATA',
  SAP_IDOC = 'SAP_IDOC',
  SAP_RFC = 'SAP_RFC',
  SAP_SOAP = 'SAP_SOAP',
  EAI = 'EAI',
}

// 기본 스키마 인터페이스
export interface BaseSchema {
  id: string;
  name: string;
  version: string;
  type: SchemaType;
  namespace?: string;
  metadata: {
    createdAt: Date;
    updatedAt: Date;
    source: string;
  };
}

// 스키마 메타데이터
export interface SchemaMetadata {
  namespace?: string;
  targetNamespace?: string;
  imports: ImportReference[];
  annotations: Annotation[];
  documentation?: string;
}

// Import 참조
export interface ImportReference {
  namespace: string;
  location?: string;
  schemaLocation?: string;
}

// 어노테이션
export interface Annotation {
  key: string;
  value: string;
  source?: string;
}

// 통합 EAI 스키마
export interface EAISchema extends BaseSchema {
  type: SchemaType.EAI;
  content: SchemaContent;
}

// 스키마 콘텐츠
export interface SchemaContent {
  entities: Entity[];
  types: TypeDefinition[];
  operations: Operation[];
  bindings: Binding[];
}

// 엔티티 정의
export interface Entity {
  name: string;
  namespace?: string;
  properties: Property[];
  relationships: Relationship[];
  constraints: Constraint[];
}

// 속성 정의
export interface Property {
  name: string;
  type: string;
  isRequired: boolean;
  isArray: boolean;
  defaultValue?: any;
  constraints: Constraint[];
  annotations: Annotation[];
}

// 관계 정의
export interface Relationship {
  name: string;
  type: RelationshipType;
  targetEntity: string;
  cardinality: Cardinality;
}

export enum RelationshipType {
  ONE_TO_ONE = 'ONE_TO_ONE',
  ONE_TO_MANY = 'ONE_TO_MANY',
  MANY_TO_ONE = 'MANY_TO_ONE',
  MANY_TO_MANY = 'MANY_TO_MANY',
}

export enum Cardinality {
  ZERO_OR_ONE = '0..1',
  ONE = '1',
  ZERO_OR_MANY = '0..*',
  ONE_OR_MANY = '1..*',
}

// 제약 조건
export interface Constraint {
  type: ConstraintType;
  value: any;
  message?: string;
}

export enum ConstraintType {
  MIN_LENGTH = 'MIN_LENGTH',
  MAX_LENGTH = 'MAX_LENGTH',
  PATTERN = 'PATTERN',
  MIN_VALUE = 'MIN_VALUE',
  MAX_VALUE = 'MAX_VALUE',
  ENUM = 'ENUM',
  UNIQUE = 'UNIQUE',
  NOT_NULL = 'NOT_NULL',
}

// 타입 정의
export interface TypeDefinition {
  name: string;
  baseType?: string;
  restrictions: Restriction[];
  facets: Facet[];
  isComplex: boolean;
  properties?: Property[];
}

// 제한 사항
export interface Restriction {
  type: RestrictionType;
  value: any;
}

export enum RestrictionType {
  ENUMERATION = 'ENUMERATION',
  PATTERN = 'PATTERN',
  MIN_INCLUSIVE = 'MIN_INCLUSIVE',
  MAX_INCLUSIVE = 'MAX_INCLUSIVE',
  MIN_EXCLUSIVE = 'MIN_EXCLUSIVE',
  MAX_EXCLUSIVE = 'MAX_EXCLUSIVE',
  LENGTH = 'LENGTH',
  MIN_LENGTH = 'MIN_LENGTH',
  MAX_LENGTH = 'MAX_LENGTH',
}

// 패싯
export interface Facet {
  name: string;
  value: any;
  fixed?: boolean;
}

// 오퍼레이션 정의
export interface Operation {
  name: string;
  type: OperationType;
  input?: OperationParameter[];
  output?: OperationParameter[];
  faults?: OperationFault[];
  documentation?: string;
}

export enum OperationType {
  REQUEST_RESPONSE = 'REQUEST_RESPONSE',
  ONE_WAY = 'ONE_WAY',
  SOLICIT_RESPONSE = 'SOLICIT_RESPONSE',
  NOTIFICATION = 'NOTIFICATION',
}

// 오퍼레이션 파라미터
export interface OperationParameter {
  name: string;
  type: string;
  isRequired: boolean;
  documentation?: string;
}

// 오퍼레이션 오류
export interface OperationFault {
  name: string;
  type: string;
  documentation?: string;
}

// 바인딩 정의
export interface Binding {
  name: string;
  type: BindingType;
  transport: string;
  operations: BindingOperation[];
}

export enum BindingType {
  SOAP = 'SOAP',
  HTTP = 'HTTP',
  REST = 'REST',
  ODATA = 'ODATA',
}

// 바인딩 오퍼레이션
export interface BindingOperation {
  name: string;
  action?: string;
  style?: string;
  use?: string;
}

// 에러 및 검증 관련 타입
export interface ValidationResult {
  isValid: boolean;
  errors: ValidationError[];
  warnings: ValidationWarning[];
  infos: ValidationInfo[];
}

export interface ValidationError {
  code: string;
  message: string;
  path?: string;
  line?: number;
  column?: number;
  severity: ErrorSeverity;
}

export interface ValidationWarning {
  code: string;
  message: string;
  path?: string;
  line?: number;
  column?: number;
}

export interface ValidationInfo {
  code: string;
  message: string;
  path?: string;
}

export enum ErrorSeverity {
  ERROR = 'ERROR',
  WARNING = 'WARNING',
  INFO = 'INFO',
}

// 파싱 결과
export interface ParseResult<T> {
  schema: T;
  errors: ValidationError[];
  warnings: ValidationWarning[];
  metadata: ParseMetadata;
}

export interface ParseMetadata {
  parseTime: number;
  fileSize: number;
  elementCount: number;
  namespaceCount: number;
}

// 변환 관련 타입
export interface ConversionResult<T> {
  result: T;
  errors: ValidationError[];
  warnings: ValidationWarning[];
  metadata: ConversionMetadata;
}

export interface ConversionMetadata {
  sourceType: SchemaType;
  targetType: SchemaType;
  conversionTime: number;
  rulesApplied: string[];
}

// 매핑 관련 타입
export interface SchemaMapping {
  id: string;
  name: string;
  sourceSchema: SchemaReference;
  targetSchema: SchemaReference;
  fieldMappings: FieldMapping[];
  transformRules: TransformRule[];
  metadata: MappingMetadata;
  createdAt: Date;
  updatedAt: Date;
}

export interface SchemaReference {
  id: string;
  name: string;
  type: SchemaType;
  version: string;
}

export interface FieldMapping {
  id: string;
  sourcePath: string;
  targetPath: string;
  transformRule?: string;
  isRequired: boolean;
  dataType: DataTypeMapping;
}

export interface DataTypeMapping {
  sourceType: string;
  targetType: string;
  isCompatible: boolean;
  conversionRequired: boolean;
}

export interface TransformRule {
  id: string;
  name: string;
  type: TransformType;
  expression: string;
  parameters: Record<string, any>;
}

export enum TransformType {
  VALUE_MAPPING = 'VALUE_MAPPING',
  FORMAT_CONVERSION = 'FORMAT_CONVERSION',
  CALCULATION = 'CALCULATION',
  CONCATENATION = 'CONCATENATION',
  SUBSTRING = 'SUBSTRING',
  CONDITIONAL = 'CONDITIONAL',
}

export interface MappingMetadata {
  version: string;
  author: string;
  description?: string;
  tags: string[];
}

// 비교 관련 타입
export interface ComparisonResult {
  added: SchemaElement[];
  removed: SchemaElement[];
  modified: ModifiedElement[];
  unchanged: SchemaElement[];
  structuralChanges: StructuralChange[];
  metadata: ComparisonMetadata;
}

export interface SchemaElement {
  path: string;
  name: string;
  type: string;
  properties: Record<string, any>;
}

export interface ModifiedElement extends SchemaElement {
  changes: PropertyChange[];
}

export interface PropertyChange {
  property: string;
  oldValue: any;
  newValue: any;
  changeType: ChangeType;
}

export enum ChangeType {
  ADDED = 'ADDED',
  REMOVED = 'REMOVED',
  MODIFIED = 'MODIFIED',
  TYPE_CHANGED = 'TYPE_CHANGED',
  CONSTRAINT_CHANGED = 'CONSTRAINT_CHANGED',
}

export interface StructuralChange {
  type: StructuralChangeType;
  path: string;
  description: string;
  impact: ChangeImpact;
}

export enum StructuralChangeType {
  NAMESPACE_CHANGED = 'NAMESPACE_CHANGED',
  HIERARCHY_CHANGED = 'HIERARCHY_CHANGED',
  CARDINALITY_CHANGED = 'CARDINALITY_CHANGED',
  REFERENCE_CHANGED = 'REFERENCE_CHANGED',
}

export enum ChangeImpact {
  BREAKING = 'BREAKING',
  NON_BREAKING = 'NON_BREAKING',
  POTENTIALLY_BREAKING = 'POTENTIALLY_BREAKING',
}

export interface ComparisonMetadata {
  comparisonTime: number;
  schema1: SchemaReference;
  schema2: SchemaReference;
  algorithm: string;
}

// 작업 이력 관련 타입
export interface WorkSession {
  id: string;
  name: string;
  type: SessionType;
  status: SessionStatus;
  data: SessionData;
  createdAt: Date;
  updatedAt: Date;
  completedAt?: Date;
}

export enum SessionType {
  PARSING = 'PARSING',
  CONVERSION = 'CONVERSION',
  VALIDATION = 'VALIDATION',
  MAPPING = 'MAPPING',
  COMPARISON = 'COMPARISON',
}

export enum SessionStatus {
  CREATED = 'CREATED',
  IN_PROGRESS = 'IN_PROGRESS',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
  CANCELLED = 'CANCELLED',
}

export interface SessionData {
  inputs: Record<string, any>;
  outputs: Record<string, any>;
  configuration: Record<string, any>;
  progress: number;
  logs: SessionLog[];
}

export interface SessionLog {
  timestamp: Date;
  level: LogLevel;
  message: string;
  data?: Record<string, any>;
}

export enum LogLevel {
  DEBUG = 'DEBUG',
  INFO = 'INFO',
  WARN = 'WARN',
  ERROR = 'ERROR',
}

// API 응답 타입
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: ApiError;
  metadata?: ResponseMetadata;
}

export interface ApiError {
  code: string;
  message: string;
  details?: Record<string, any>;
  stack?: string;
}

export interface ResponseMetadata {
  timestamp: Date;
  requestId: string;
  processingTime: number;
  version: string;
}

// 파일 업로드 관련 타입
export interface UploadedFile {
  id: string;
  originalName: string;
  filename: string;
  mimetype: string;
  size: number;
  path: string;
  uploadedAt: Date;
}

export interface UploadResult {
  file: UploadedFile;
  validation: ValidationResult;
}

// 설정 관련 타입
export interface AppConfig {
  server: ServerConfig;
  parsing: ParsingConfig;
  validation: ValidationConfig;
  storage: StorageConfig;
  security: SecurityConfig;
}

export interface ServerConfig {
  port: number;
  host: string;
  cors: CorsConfig;
  rateLimit: RateLimitConfig;
}

export interface CorsConfig {
  origin: string | string[];
  credentials: boolean;
  methods: string[];
}

export interface RateLimitConfig {
  windowMs: number;
  max: number;
  message: string;
}

export interface ParsingConfig {
  maxFileSize: number;
  timeout: number;
  supportedFormats: string[];
  xmlParserOptions: Record<string, any>;
}

export interface ValidationConfig {
  strictMode: boolean;
  maxErrors: number;
  enableWarnings: boolean;
}

export interface StorageConfig {
  type: StorageType;
  path: string;
  maxSize: number;
  retention: number;
}

export enum StorageType {
  LOCAL = 'LOCAL',
  MEMORY = 'MEMORY',
  S3 = 'S3',
  AZURE = 'AZURE',
}

export interface SecurityConfig {
  enableXXEProtection: boolean;
  enableSSRFProtection: boolean;
  allowedHosts: string[];
  blockedHosts: string[];
  maxRequestSize: number;
}

// 다른 타입 파일들에서 export
export * from './wsdl';
export * from './xsd';
export * from './openapi';
export * from './json-schema';
export * from './sap';
export * from './errors';
export * from './unified';