import { NamespaceContext } from '../types';
/**
 * 네임스페이스 해결기
 * XML/XSD 문서의 네임스페이스를 처리하고 참조를 해결합니다.
 */
export declare class NamespaceResolver {
    /**
     * XML 문서에서 네임스페이스 정보를 추출합니다.
     * @param xmlContent XML 문자열
     * @returns 네임스페이스 컨텍스트
     */
    extractNamespaces(xmlContent: string): NamespaceContext;
    /**
     * 파싱된 객체에 네임스페이스 정보를 적용합니다.
     * @param data 파싱된 XML 객체
     * @param namespaces 네임스페이스 컨텍스트
     * @returns 네임스페이스가 처리된 객체
     */
    processNamespaces(data: any, namespaces: NamespaceContext): any;
    /**
     * 네임스페이스가 포함된 이름을 해결합니다.
     * @param name 네임스페이스가 포함된 이름 (예: "xs:element")
     * @param namespaces 네임스페이스 컨텍스트
     * @returns 해결된 이름 정보
     */
    resolveNamespacedName(name: string, namespaces: NamespaceContext): string;
    /**
     * 네임스페이스 URI에서 접두사를 찾습니다.
     * @param uri 네임스페이스 URI
     * @param namespaces 네임스페이스 컨텍스트
     * @returns 접두사 (없으면 undefined)
     */
    findPrefixForUri(uri: string, namespaces: NamespaceContext): string | undefined;
    /**
     * 접두사에서 네임스페이스 URI를 찾습니다.
     * @param prefix 접두사
     * @param namespaces 네임스페이스 컨텍스트
     * @returns 네임스페이스 URI (없으면 undefined)
     */
    findUriForPrefix(prefix: string, namespaces: NamespaceContext): string | undefined;
    /**
     * 두 네임스페이스 컨텍스트를 병합합니다.
     * @param context1 첫 번째 컨텍스트
     * @param context2 두 번째 컨텍스트
     * @returns 병합된 컨텍스트
     */
    mergeNamespaceContexts(context1: NamespaceContext, context2: NamespaceContext): NamespaceContext;
    /**
     * 네임스페이스 충돌을 검사합니다.
     * @param namespaces 네임스페이스 컨텍스트
     * @returns 충돌 정보 배열
     */
    checkNamespaceConflicts(namespaces: NamespaceContext): Array<{
        prefix: string;
        conflictingUris: string[];
    }>;
    /**
     * 표준 XML 스키마 네임스페이스인지 확인합니다.
     * @param uri 네임스페이스 URI
     * @returns 표준 네임스페이스 여부
     */
    isStandardXMLSchemaNamespace(uri: string): boolean;
    /**
     * 네임스페이스 매핑을 설정합니다.
     * @param namespaces 네임스페이스 매핑 객체
     */
    setNamespaces(namespaces: Record<string, string>): void;
    /**
     * QName을 해결합니다.
     * @param qname QName 문자열 (예: "tns:ElementName")
     * @returns 해결된 이름
     */
    resolveQName(qname: string): string;
    /**
     * 네임스페이스 컨텍스트를 문자열로 변환합니다 (디버깅용).
     * @param namespaces 네임스페이스 컨텍스트
     * @returns 문자열 표현
     */
    toString(namespaces: NamespaceContext): string;
    private currentContext?;
}
//# sourceMappingURL=namespace-resolver.d.ts.map