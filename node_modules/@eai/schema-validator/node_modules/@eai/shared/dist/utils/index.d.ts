import { ValidationError, ErrorSeverity, ApiResponse } from '../types';
/**
 * 깊은 객체 복사
 */
export declare function deepClone<T>(obj: T): T;
/**
 * 객체 병합 (깊은 병합)
 */
export declare function deepMerge<T extends Record<string, any>>(target: T, source: Partial<T>): T;
/**
 * 객체인지 확인
 */
export declare function isObject(value: any): value is Record<string, any>;
/**
 * 빈 값인지 확인
 */
export declare function isEmpty(value: any): boolean;
/**
 * 문자열을 카멜케이스로 변환
 */
export declare function toCamelCase(str: string): string;
/**
 * 문자열을 파스칼케이스로 변환
 */
export declare function toPascalCase(str: string): string;
/**
 * 문자열을 케밥케이스로 변환
 */
export declare function toKebabCase(str: string): string;
/**
 * 문자열을 스네이크케이스로 변환
 */
export declare function toSnakeCase(str: string): string;
/**
 * UUID 생성
 */
export declare function generateUUID(): string;
/**
 * 해시 생성 (간단한 문자열 해시)
 */
export declare function generateHash(str: string): string;
/**
 * 파일 크기를 읽기 쉬운 형태로 변환
 */
export declare function formatFileSize(bytes: number): string;
/**
 * 시간을 읽기 쉬운 형태로 변환
 */
export declare function formatDuration(milliseconds: number): string;
/**
 * 날짜를 ISO 문자열로 변환
 */
export declare function toISOString(date: Date): string;
/**
 * ISO 문자열을 날짜로 변환
 */
export declare function fromISOString(isoString: string): Date;
/**
 * 배열을 청크로 분할
 */
export declare function chunk<T>(array: T[], size: number): T[][];
/**
 * 배열에서 중복 제거
 */
export declare function unique<T>(array: T[]): T[];
/**
 * 배열에서 중복 제거 (키 기반)
 */
export declare function uniqueBy<T, K>(array: T[], keyFn: (_item: T) => K): T[];
/**
 * 배열을 그룹화
 */
export declare function groupBy<T, K extends string | number | symbol>(array: T[], keyFn: (_item: T) => K): Record<K, T[]>;
/**
 * 문자열 유사도 계산 (Levenshtein distance 기반)
 */
export declare function calculateSimilarity(str1: string, str2: string): number;
/**
 * 검증 에러 생성
 */
export declare function createValidationError(code: string, message: string, path?: string, line?: number, column?: number, severity?: ErrorSeverity): ValidationError;
/**
 * API 응답 생성 (성공)
 */
export declare function createSuccessResponse<T>(data: T, metadata?: any): ApiResponse<T>;
/**
 * API 응답 생성 (에러)
 */
export declare function createErrorResponse(code: string, message: string, details?: Record<string, any>): ApiResponse<never>;
/**
 * 비동기 함수에 타임아웃 적용
 */
export declare function withTimeout<T>(promise: Promise<T>, timeoutMs: number, timeoutMessage?: string): Promise<T>;
/**
 * 재시도 로직
 */
export declare function retry<T>(fn: () => Promise<T>, maxAttempts?: number, delay?: number): Promise<T>;
/**
 * 디바운스 함수
 */
export declare function debounce<T extends (..._args: any[]) => any>(func: T, wait: number): (..._args: Parameters<T>) => void;
/**
 * 스로틀 함수
 */
export declare function throttle<T extends (..._args: any[]) => any>(func: T, limit: number): (..._args: Parameters<T>) => void;
//# sourceMappingURL=index.d.ts.map