import { UnifiedSchema } from '@eai/shared';
import { TypeValidationResult } from '../types';
/**
 * 타입 호환성 검증기
 */
export declare class TypeValidator {
    private typeDefinitions;
    private typeHierarchy;
    /**
     * 스키마의 타입 호환성을 검증합니다
     */
    validateTypes(schema: UnifiedSchema): Promise<TypeValidationResult>;
    /**
     * 타입 정의를 수집합니다
     */
    private collectTypeDefinitions;
    /**
     * 내장 타입들을 등록합니다
     */
    private registerBuiltInTypes;
    /**
     * 호환되지 않는 타입들을 찾습니다
     */
    private findIncompatibleTypes;
    /**
     * 타입 호환성을 검사합니다
     */
    private checkTypeCompatibility;
    /**
     * 상속 호환성을 검사합니다
     */
    private checkInheritanceCompatibility;
    /**
     * 제약조건 호환성을 검사합니다
     */
    private checkConstraintCompatibility;
    /**
     * 누락된 타입들을 찾습니다
     */
    private findMissingTypes;
    /**
     * 참조된 타입들을 수집합니다
     */
    private collectReferencedTypes;
    /**
     * 타입 참조를 추가합니다
     */
    private addTypeReference;
    /**
     * 잘못된 제약조건들을 찾습니다
     */
    private findInvalidConstraints;
    /**
     * 제약조건을 검증합니다
     */
    private validateConstraint;
    /**
     * 순환 상속이 있는지 확인합니다
     */
    private hasCircularInheritance;
    /**
     * 숫자 타입인지 확인합니다
     */
    private isNumericType;
    /**
     * 문자열 타입인지 확인합니다
     */
    private isStringType;
    /**
     * 내장 타입인지 확인합니다
     */
    private isBuiltInType;
    /**
     * 유효한 정규식인지 확인합니다
     */
    private isValidRegex;
    /**
     * 타입 이름에서 네임스페이스를 추출합니다
     */
    private extractNamespace;
}
//# sourceMappingURL=type-validator.d.ts.map