import { UnifiedSchema } from '@eai/shared';
import { ISchemaValidator } from './interfaces/validator';
import { ValidationResult, ValidationOptions, ReferenceValidationResult, NamespaceValidationResult, TypeValidationResult, ValidationReport } from './types';
/**
 * 메인 스키마 검증 엔진
 */
export declare class SchemaValidator implements ISchemaValidator {
    private syntaxValidator;
    private referenceValidator;
    private namespaceValidator;
    private typeValidator;
    private reportGenerator;
    constructor();
    /**
     * 스키마 전체 검증을 수행합니다
     */
    validate(schema: UnifiedSchema, options?: ValidationOptions): Promise<ValidationResult>;
    /**
     * 구문적 정확성 검증
     */
    validateSyntax(schema: UnifiedSchema): Promise<ValidationResult>;
    /**
     * 참조 무결성 검증
     */
    validateReferences(schema: UnifiedSchema): Promise<ReferenceValidationResult>;
    /**
     * 네임스페이스 충돌 검증
     */
    validateNamespaces(schema: UnifiedSchema): Promise<NamespaceValidationResult>;
    /**
     * 타입 호환성 검증
     */
    validateTypes(schema: UnifiedSchema): Promise<TypeValidationResult>;
    generateReport(results: ValidationResult[]): Promise<ValidationReport>;
    /**
     * 통합 검증을 수행하고 리포트를 생성합니다
     */
    validateAndGenerateReport(schema: UnifiedSchema, options?: ValidationOptions): Promise<ValidationReport>;
    /**
     * 검증 결과 요약을 생성합니다
     */
    private createSummary;
    /**
     * 배치 검증을 수행합니다
     */
    validateBatch(schemas: UnifiedSchema[], options?: ValidationOptions): Promise<ValidationReport[]>;
    /**
     * 검증 통계를 생성합니다
     */
    generateValidationStatistics(reports: ValidationReport[]): {
        totalSchemas: number;
        validSchemas: number;
        invalidSchemas: number;
        warningSchemas: number;
        totalIssues: number;
        totalErrors: number;
        totalWarnings: number;
        averageExecutionTime: number;
    };
}
//# sourceMappingURL=schema-validator.d.ts.map