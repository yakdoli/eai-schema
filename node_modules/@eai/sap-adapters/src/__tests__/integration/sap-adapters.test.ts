// SAP 어댑터 통합 테스트
import { describe, it, expect, beforeEach } from '@jest/globals';
import {
  SAPAdapterFactory,
  parseSAPContent,
  validateSAPSchema,
  ODataAdapter,
  IDocAdapter,
  RFCAdapter,
  SOAPAdapter,
  SAPValidator,
} from '../../index';
import { SAPObjectType, SchemaType } from '@eai/shared/types/sap';

describe('SAP Adapters Integration Tests', () => {
  let odataAdapter: ODataAdapter;
  let idocAdapter: IDocAdapter;
  let rfcAdapter: RFCAdapter;
  let soapAdapter: SOAPAdapter;
  let validator: SAPValidator;

  beforeEach(() => {
    odataAdapter = new ODataAdapter();
    idocAdapter = new IDocAdapter();
    rfcAdapter = new RFCAdapter();
    soapAdapter = new SOAPAdapter();
    validator = new SAPValidator();
  });

  describe('SAPAdapterFactory', () => {
    it('should return correct adapter for OData', () => {
      const adapter = SAPAdapterFactory.getAdapter(SAPObjectType.ODATA_SERVICE);
      expect(adapter).toBeInstanceOf(ODataAdapter);
    });

    it('should return correct adapter for IDoc', () => {
      const adapter = SAPAdapterFactory.getAdapter(SAPObjectType.IDOC_TYPE);
      expect(adapter).toBeInstanceOf(IDocAdapter);
    });

    it('should return correct adapter for RFC', () => {
      const adapter = SAPAdapterFactory.getAdapter(SAPObjectType.RFC_FUNCTION);
      expect(adapter).toBeInstanceOf(RFCAdapter);
    });

    it('should detect OData content type', () => {
      const odataContent = `
        <?xml version="1.0" encoding="utf-8"?>
        <edmx:Edmx Version="1.0" xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx">
          <edmx:DataServices>
            <Schema Namespace="TestService" xmlns="http://schemas.microsoft.com/ado/2008/09/edm">
            </Schema>
          </edmx:DataServices>
        </edmx:Edmx>
      `;
      
      const type = SAPAdapterFactory.detectObjectType(odataContent);
      expect(type).toBe(SAPObjectType.ODATA_SERVICE);
    });
  });
});  d
escribe('OData Adapter Integration', () => {
    const sampleODataMetadata = `
      <?xml version="1.0" encoding="utf-8"?>
      <edmx:Edmx Version="1.0" xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx">
        <edmx:DataServices>
          <Schema Namespace="TestService" xmlns="http://schemas.microsoft.com/ado/2008/09/edm">
            <EntityType Name="Customer">
              <Key>
                <PropertyRef Name="CustomerID" />
              </Key>
              <Property Name="CustomerID" Type="Edm.String" Nullable="false" MaxLength="5" />
              <Property Name="CompanyName" Type="Edm.String" Nullable="false" MaxLength="40" />
            </EntityType>
            <EntityContainer Name="TestContainer" IsDefaultEntityContainer="true">
              <EntitySet Name="Customers" EntityType="TestService.Customer" />
            </EntityContainer>
          </Schema>
        </edmx:DataServices>
      </edmx:Edmx>
    `;

    it('should parse OData metadata successfully', async () => {
      const result = await odataAdapter.parse(sampleODataMetadata);
      
      expect(result.schema).toBeDefined();
      expect(result.schema.type).toBe(SchemaType.SAP_ODATA);
      expect(result.schema.content.entityTypes).toHaveLength(1);
      expect(result.schema.content.entityTypes[0].name).toBe('Customer');
      expect(result.schema.content.entitySets).toHaveLength(1);
      expect(result.schema.content.entitySets[0].name).toBe('Customers');
    });

    it('should validate OData schema', async () => {
      const parseResult = await odataAdapter.parse(sampleODataMetadata);
      const validationResult = await odataAdapter.validate(parseResult.schema);
      
      expect(validationResult.isValid).toBe(true);
      expect(validationResult.errors).toHaveLength(0);
    });
  });

  describe('IDoc Adapter Integration', () => {
    const sampleIDocXML = `
      <IDOC>
        <EDI_DC40 TABNAM="EDI_DC40" MANDT="100" DOCNUM="0000000001" DOCREL="700" 
                  IDOCTYP="ORDERS05" MESTYP="ORDERS" />
        <E1EDK01 SEGNAM="E1EDK01" HLEVEL="01">
          <BELNR>4500000001</BELNR>
          <CURCY>USD</CURCY>
        </E1EDK01>
        <E1EDP01 SEGNAM="E1EDP01" HLEVEL="02">
          <POSEX>000010</POSEX>
          <MATNR>MATERIAL001</MATNR>
        </E1EDP01>
      </IDOC>
    `;

    it('should parse IDoc XML successfully', async () => {
      const result = await idocAdapter.parse(sampleIDocXML);
      
      expect(result.schema).toBeDefined();
      expect(result.schema.type).toBe(SchemaType.SAP_IDOC);
      expect(result.schema.content.idocType).toBe('ORDERS05');
      expect(result.schema.content.segments.length).toBeGreaterThan(0);
    });

    it('should validate IDoc schema', async () => {
      const parseResult = await idocAdapter.parse(sampleIDocXML);
      const validationResult = await idocAdapter.validate(parseResult.schema);
      
      expect(validationResult.isValid).toBe(true);
    });
  });

  describe('RFC Adapter Integration', () => {
    const sampleRFCJSON = `
      {
        "functionName": "BAPI_CUSTOMER_GETLIST",
        "functionGroup": "BUS1006",
        "shortText": "Get Customer List",
        "importing": [
          {
            "name": "MAXROWS",
            "type": "ELEMENTARY",
            "dataType": "INT4",
            "optional": true,
            "description": "Maximum number of rows"
          }
        ],
        "exporting": [
          {
            "name": "RETURN",
            "type": "STRUCTURE",
            "dataType": "BAPIRET2",
            "optional": false,
            "description": "Return parameter"
          }
        ],
        "tables": [
          {
            "name": "CUSTOMERLIST",
            "type": "BAPICUSTOMER",
            "description": "Customer list table",
            "optional": false,
            "structure": {
              "name": "BAPICUSTOMER",
              "fields": [
                {
                  "name": "CUSTOMER",
                  "dataType": "CHAR",
                  "length": 10,
                  "description": "Customer number",
                  "offset": 0
                }
              ]
            }
          }
        ]
      }
    `;

    it('should parse RFC JSON successfully', async () => {
      const result = await rfcAdapter.parse(sampleRFCJSON);
      
      expect(result.schema).toBeDefined();
      expect(result.schema.type).toBe(SchemaType.SAP_RFC);
      expect(result.schema.content.functionName).toBe('BAPI_CUSTOMER_GETLIST');
      expect(result.schema.content.importing).toHaveLength(1);
      expect(result.schema.content.tables).toHaveLength(1);
    });

    it('should validate RFC schema', async () => {
      const parseResult = await rfcAdapter.parse(sampleRFCJSON);
      const validationResult = await rfcAdapter.validate(parseResult.schema);
      
      expect(validationResult.isValid).toBe(true);
    });
  });

  describe('Convenience Functions', () => {
    it('should parse SAP content with auto-detection', async () => {
      const odataContent = `
        <edmx:Edmx Version="1.0" xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx">
          <edmx:DataServices>
            <Schema Namespace="Test" xmlns="http://schemas.microsoft.com/ado/2008/09/edm">
              <EntityContainer Name="Container" IsDefaultEntityContainer="true">
              </EntityContainer>
            </Schema>
          </edmx:DataServices>
        </edmx:Edmx>
      `;

      const result = await parseSAPContent(odataContent);
      expect(result.schema.type).toBe(SchemaType.SAP_ODATA);
    });

    it('should validate SAP schema using convenience function', async () => {
      const schema = {
        type: SchemaType.SAP_ODATA,
        content: {
          entityTypes: [],
          entitySets: [],
          complexTypes: [],
          associations: [],
          functionImports: [],
          entityContainer: {
            name: 'TestContainer',
            isDefaultEntityContainer: true,
            entitySets: [],
            functionImports: [],
          },
        },
      };

      const result = await validateSAPSchema(schema);
      expect(result).toBeDefined();
      expect(result.summary).toBeDefined();
    });
  });

  describe('Error Handling', () => {
    it('should handle invalid OData content', async () => {
      const invalidContent = '<invalid>xml</invalid>';
      
      await expect(odataAdapter.parse(invalidContent)).rejects.toThrow();
    });

    it('should handle unsupported SAP object type', () => {
      expect(() => {
        SAPAdapterFactory.detectObjectType('unsupported content');
      }).toThrow('SAP 객체 타입을 감지할 수 없습니다.');
    });

    it('should handle invalid schema type in validation', async () => {
      const invalidSchema = { type: 'INVALID_TYPE' };
      
      await expect(validateSAPSchema(invalidSchema)).rejects.toThrow();
    });
  });
});