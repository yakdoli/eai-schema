// RFC 어댑터 단위 테스트
import { describe, it, expect, beforeEach } from '@jest/globals';
import { RFCAdapter } from '../../adapters/rfc-adapter';
import { SchemaType, RFCParameterType } from '@eai/shared/types/sap';

describe('RFCAdapter', () => {
  let adapter: RFCAdapter;

  beforeEach(() => {
    adapter = new RFCAdapter();
  });

  describe('parse JSON RFC', () => {
    it('should parse JSON RFC metadata successfully', async () => {
      const rfcJson = `
        {
          "functionName": "BAPI_CUSTOMER_GETLIST",
          "functionGroup": "BUS1006",
          "shortText": "Get Customer List",
          "importing": [
            {
              "name": "MAXROWS",
              "type": "ELEMENTARY",
              "dataType": "INT4",
              "optional": true,
              "description": "Maximum number of rows"
            }
          ],
          "exporting": [
            {
              "name": "RETURN",
              "type": "STRUCTURE",
              "dataType": "BAPIRET2",
              "optional": false,
              "description": "Return parameter"
            }
          ],
          "tables": [
            {
              "name": "CUSTOMERLIST",
              "type": "BAPICUSTOMER",
              "description": "Customer list table",
              "optional": false,
              "structure": {
                "name": "BAPICUSTOMER",
                "fields": [
                  {
                    "name": "CUSTOMER",
                    "dataType": "CHAR",
                    "length": 10,
                    "description": "Customer number",
                    "offset": 0
                  }
                ]
              }
            }
          ]
        }
      `;

      const result = await adapter.parse(rfcJson);

      expect(result.schema.type).toBe(SchemaType.SAP_RFC);
      expect(result.schema.content.functionName).toBe('BAPI_CUSTOMER_GETLIST');
      expect(result.schema.content.functionGroup).toBe('BUS1006');
      expect(result.schema.content.importing).toHaveLength(1);
      expect(result.schema.content.exporting).toHaveLength(1);
      expect(result.schema.content.tables).toHaveLength(1);
    });

    it('should handle invalid JSON', async () => {
      const invalidJson = '{ invalid json }';

      await expect(adapter.parse(invalidJson)).rejects.toThrow();
    });
  });

  describe('parse text RFC', () => {
    it('should parse text RFC definition successfully', async () => {
      const rfcText = `
        FUNCTION BAPI_CUSTOMER_GETLIST.
        *"----------------------------------------------------------------------
        *"*"Local Interface:
        *"  IMPORTING
        *"     VALUE(MAXROWS) TYPE  I OPTIONAL
        *"  EXPORTING
        *"     VALUE(RETURN) TYPE  BAPIRET2
        *"  TABLES
        *"      CUSTOMERLIST TYPE BAPICUSTOMER OPTIONAL
        *"----------------------------------------------------------------------
      `;

      const result = await adapter.parse(rfcText);

      expect(result.schema.type).toBe(SchemaType.SAP_RFC);
      expect(result.schema.content.functionName).toBe('BAPI_CUSTOMER_GETLIST');
      expect(result.schema.content.importing.length).toBeGreaterThan(0);
      expect(result.schema.content.exporting.length).toBeGreaterThan(0);
      expect(result.schema.content.tables.length).toBeGreaterThan(0);
    });
  });

  describe('validate', () => {
    it('should validate valid RFC schema', async () => {
      const schema = {
        id: 'test',
        name: 'BAPI_CUSTOMER_GETLIST',
        version: '1.0',
        type: SchemaType.SAP_RFC,
        originalFormat: 'JSON',
        metadata: {
          namespace: 'SAP.RFC.BAPI_CUSTOMER_GETLIST',
          targetNamespace: 'SAP.RFC.BAPI_CUSTOMER_GETLIST',
          imports: [],
          annotations: [],
        },
        content: {
          functionName: 'BAPI_CUSTOMER_GETLIST',
          functionGroup: 'BUS1006',
          shortText: 'Get Customer List',
          importing: [{
            name: 'MAXROWS',
            type: RFCParameterType.ELEMENTARY,
            dataType: 'INT4',
            optional: true,
            description: 'Maximum number of rows',
          }],
          exporting: [{
            name: 'RETURN',
            type: RFCParameterType.STRUCTURE,
            dataType: 'BAPIRET2',
            optional: false,
            description: 'Return parameter',
          }],
          changing: [],
          tables: [{
            name: 'CUSTOMERLIST',
            type: 'BAPICUSTOMER',
            description: 'Customer list table',
            optional: false,
            structure: {
              name: 'BAPICUSTOMER',
              fields: [{
                name: 'CUSTOMER',
                dataType: 'CHAR',
                length: 10,
                description: 'Customer number',
                offset: 0,
              }],
            },
          }],
          exceptions: [],
          documentation: {
            shortText: 'Get Customer List',
            longText: '',
            parameters: [],
            exceptions: [],
          },
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const result = await adapter.validate(schema);

      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should detect missing function name', async () => {
      const schema = {
        id: 'test',
        name: '',
        version: '1.0',
        type: SchemaType.SAP_RFC,
        originalFormat: 'JSON',
        metadata: {
          namespace: '',
          targetNamespace: '',
          imports: [],
          annotations: [],
        },
        content: {
          functionName: '',
          functionGroup: '',
          shortText: '',
          importing: [],
          exporting: [],
          changing: [],
          tables: [],
          exceptions: [],
          documentation: {
            shortText: '',
            longText: '',
            parameters: [],
            exceptions: [],
          },
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const result = await adapter.validate(schema);

      expect(result.isValid).toBe(false);
      expect(result.errors.some(e => e.rule === 'FUNCTION_NAME_REQUIRED')).toBe(true);
    });

    it('should detect duplicate parameter names', async () => {
      const schema = {
        id: 'test',
        name: 'TEST_FUNCTION',
        version: '1.0',
        type: SchemaType.SAP_RFC,
        originalFormat: 'JSON',
        metadata: {
          namespace: 'SAP.RFC.TEST_FUNCTION',
          targetNamespace: 'SAP.RFC.TEST_FUNCTION',
          imports: [],
          annotations: [],
        },
        content: {
          functionName: 'TEST_FUNCTION',
          functionGroup: 'TEST',
          shortText: 'Test Function',
          importing: [
            {
              name: 'PARAM1',
              type: RFCParameterType.ELEMENTARY,
              dataType: 'CHAR',
              optional: false,
              description: 'Parameter 1',
            },
            {
              name: 'PARAM1', // 중복된 이름
              type: RFCParameterType.ELEMENTARY,
              dataType: 'INT4',
              optional: false,
              description: 'Parameter 1 duplicate',
            },
          ],
          exporting: [],
          changing: [],
          tables: [],
          exceptions: [],
          documentation: {
            shortText: 'Test Function',
            longText: '',
            parameters: [],
            exceptions: [],
          },
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const result = await adapter.validate(schema);

      expect(result.isValid).toBe(false);
      expect(result.errors.some(e => e.rule === 'DUPLICATE_PARAMETER_NAME')).toBe(true);
    });
  });
});