// OData 어댑터 단위 테스트
import { describe, it, expect, beforeEach } from '@jest/globals';
import { ODataAdapter } from '../../adapters/odata-adapter';
import { SchemaType } from '@eai/shared/types/sap';

describe('ODataAdapter', () => {
  let adapter: ODataAdapter;

  beforeEach(() => {
    adapter = new ODataAdapter();
  });

  describe('parse', () => {
    it('should parse simple OData metadata', async () => {
      const metadata = `
        <?xml version="1.0" encoding="utf-8"?>
        <edmx:Edmx Version="1.0" xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx">
          <edmx:DataServices>
            <Schema Namespace="TestService" xmlns="http://schemas.microsoft.com/ado/2008/09/edm">
              <EntityType Name="Product">
                <Key>
                  <PropertyRef Name="ProductID" />
                </Key>
                <Property Name="ProductID" Type="Edm.Int32" Nullable="false" />
                <Property Name="ProductName" Type="Edm.String" MaxLength="40" />
              </EntityType>
              <EntityContainer Name="TestContainer" IsDefaultEntityContainer="true">
                <EntitySet Name="Products" EntityType="TestService.Product" />
              </EntityContainer>
            </Schema>
          </edmx:DataServices>
        </edmx:Edmx>
      `;

      const result = await adapter.parse(metadata);

      expect(result.schema.type).toBe(SchemaType.SAP_ODATA);
      expect(result.schema.name).toBe('TestService');
      expect(result.schema.content.entityTypes).toHaveLength(1);
      expect(result.schema.content.entityTypes[0].name).toBe('Product');
      expect(result.schema.content.entityTypes[0].properties).toHaveLength(2);
      expect(result.schema.content.entitySets).toHaveLength(1);
      expect(result.schema.content.entitySets[0].name).toBe('Products');
    });

    it('should parse OData with complex types', async () => {
      const metadata = `
        <edmx:Edmx Version="1.0" xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx">
          <edmx:DataServices>
            <Schema Namespace="TestService" xmlns="http://schemas.microsoft.com/ado/2008/09/edm">
              <ComplexType Name="Address">
                <Property Name="Street" Type="Edm.String" MaxLength="100" />
                <Property Name="City" Type="Edm.String" MaxLength="50" />
              </ComplexType>
              <EntityContainer Name="TestContainer" IsDefaultEntityContainer="true">
              </EntityContainer>
            </Schema>
          </edmx:DataServices>
        </edmx:Edmx>
      `;

      const result = await adapter.parse(metadata);

      expect(result.schema.content.complexTypes).toHaveLength(1);
      expect(result.schema.content.complexTypes[0].name).toBe('Address');
      expect(result.schema.content.complexTypes[0].properties).toHaveLength(2);
    });

    it('should handle parsing errors gracefully', async () => {
      const invalidMetadata = '<invalid>xml</invalid>';

      await expect(adapter.parse(invalidMetadata)).rejects.toThrow();
    });
  });

  describe('validate', () => {
    it('should validate valid OData schema', async () => {
      const schema = {
        id: 'test',
        name: 'TestService',
        version: '1.0',
        type: SchemaType.SAP_ODATA,
        originalFormat: 'EDMX',
        metadata: {
          namespace: 'TestService',
          targetNamespace: 'TestService',
          imports: [],
          annotations: [],
        },
        content: {
          entityTypes: [{
            name: 'Product',
            key: { propertyRefs: [{ name: 'ProductID' }] },
            properties: [
              { name: 'ProductID', type: 'Edm.Int32', nullable: false, constraints: [] },
              { name: 'ProductName', type: 'Edm.String', nullable: true, constraints: [] }
            ],
            navigationProperties: [],
            annotations: [],
          }],
          entitySets: [{
            name: 'Products',
            entityType: 'TestService.Product',
            annotations: [],
          }],
          complexTypes: [],
          associations: [],
          functionImports: [],
          entityContainer: {
            name: 'TestContainer',
            isDefaultEntityContainer: true,
            entitySets: [{
              name: 'Products',
              entityType: 'TestService.Product',
              annotations: [],
            }],
            functionImports: [],
          },
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const result = await adapter.validate(schema);

      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should detect missing EntityContainer', async () => {
      const schema = {
        id: 'test',
        name: 'TestService',
        version: '1.0',
        type: SchemaType.SAP_ODATA,
        originalFormat: 'EDMX',
        metadata: {
          namespace: 'TestService',
          targetNamespace: 'TestService',
          imports: [],
          annotations: [],
        },
        content: {
          entityTypes: [],
          entitySets: [],
          complexTypes: [],
          associations: [],
          functionImports: [],
          entityContainer: null as any,
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const result = await adapter.validate(schema);

      expect(result.isValid).toBe(false);
      expect(result.errors).toHaveLength(1);
      expect(result.errors[0].rule).toBe('ENTITY_CONTAINER_REQUIRED');
    });
  });
});