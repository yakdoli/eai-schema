// IDoc 어댑터 단위 테스트
import { describe, it, expect, beforeEach } from '@jest/globals';
import { IDocAdapter } from '../../adapters/idoc-adapter';
import { SchemaType, SegmentStatus } from '@eai/shared/types/sap';

describe('IDocAdapter', () => {
  let adapter: IDocAdapter;

  beforeEach(() => {
    adapter = new IDocAdapter();
  });

  describe('parse XML IDoc', () => {
    it('should parse XML IDoc successfully', async () => {
      const xmlIdoc = `
        <IDOC>
          <EDI_DC40 TABNAM="EDI_DC40" MANDT="100" DOCNUM="0000000001" 
                    DOCREL="700" IDOCTYP="ORDERS05" MESTYP="ORDERS" />
          <E1EDK01 SEGNAM="E1EDK01" HLEVEL="01">
            <BELNR>4500000001</BELNR>
            <CURCY>USD</CURCY>
          </E1EDK01>
          <E1EDP01 SEGNAM="E1EDP01" HLEVEL="02">
            <POSEX>000010</POSEX>
            <MATNR>MATERIAL001</MATNR>
          </E1EDP01>
        </IDOC>
      `;

      const result = await adapter.parse(xmlIdoc);

      expect(result.schema.type).toBe(SchemaType.SAP_IDOC);
      expect(result.schema.content.idocType).toBe('ORDERS05');
      expect(result.schema.content.controlRecord.mestyp).toBe('ORDERS');
      expect(result.schema.content.segments.length).toBeGreaterThan(0);
      expect(result.schema.content.hierarchy.root).toBeDefined();
    });

    it('should handle invalid XML IDoc', async () => {
      const invalidXml = '<invalid>xml</invalid>';

      await expect(adapter.parse(invalidXml)).rejects.toThrow();
    });
  });

  describe('parse flat file IDoc', () => {
    it('should parse flat file IDoc successfully', async () => {
      const flatIdoc = `EDI_DC40100000000000017000 ORDERS05                      ORDERS                        
E1EDK01   100000000000017000010014500000001USD                           
E1EDP01   100000000000017000020000010MATERIAL001                        `;

      const result = await adapter.parse(flatIdoc);

      expect(result.schema.type).toBe(SchemaType.SAP_IDOC);
      expect(result.schema.content.controlRecord.tabnam).toBe('EDI_DC40');
      expect(result.schema.content.dataRecords.length).toBeGreaterThan(0);
    });

    it('should handle empty flat file', async () => {
      const emptyFile = '';

      await expect(adapter.parse(emptyFile)).rejects.toThrow('빈 IDoc 파일입니다.');
    });
  });

  describe('validate', () => {
    it('should validate valid IDoc schema', async () => {
      const schema = {
        id: 'test',
        name: 'ORDERS05',
        version: '700',
        type: SchemaType.SAP_IDOC,
        originalFormat: 'XML',
        metadata: {
          namespace: 'SAP.IDoc.ORDERS05',
          targetNamespace: 'SAP.IDoc.ORDERS05',
          imports: [],
          annotations: [],
        },
        content: {
          idocType: 'ORDERS05',
          release: '700',
          segments: [{
            name: 'E1EDK01',
            definition: '세그먼트 E1EDK01',
            level: 1,
            status: SegmentStatus.MANDATORY,
            fields: [{
              name: 'BELNR',
              dataElement: 'BELNR',
              dataType: 'CHAR',
              length: 35,
              position: 1,
              description: '문서 번호',
              constraints: [],
            }],
            children: [],
            minOccurs: 1,
            maxOccurs: 1,
          }],
          hierarchy: {
            root: 'E1EDK01',
            levels: [{
              level: 1,
              segments: ['E1EDK01'],
            }],
          },
          controlRecord: {
            tabnam: 'EDI_DC40',
            mandt: '100',
            docnum: '0000000001',
            docrel: '700',
            status: '30',
            direct: '2',
            outmod: '2',
            idoctyp: 'ORDERS05',
            mestyp: 'ORDERS',
            sndpor: 'SAPCLNT100',
            sndprt: 'LS',
            sndprn: 'CLNT100',
            rcvpor: 'PARTNER',
            rcvprt: 'LS',
            rcvprn: 'PARTNER',
          },
          dataRecords: [],
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const result = await adapter.validate(schema);

      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should detect missing IDoc type', async () => {
      const schema = {
        id: 'test',
        name: '',
        version: '700',
        type: SchemaType.SAP_IDOC,
        originalFormat: 'XML',
        metadata: {
          namespace: '',
          targetNamespace: '',
          imports: [],
          annotations: [],
        },
        content: {
          idocType: '',
          release: '700',
          segments: [],
          hierarchy: { root: '', levels: [] },
          controlRecord: {
            tabnam: 'EDI_DC40',
            mandt: '100',
            docnum: '',
            docrel: '700',
            status: '30',
            direct: '2',
            outmod: '2',
            idoctyp: '',
            mestyp: '',
            sndpor: '',
            sndprt: '',
            sndprn: '',
            rcvpor: '',
            rcvprt: '',
            rcvprn: '',
          },
          dataRecords: [],
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      const result = await adapter.validate(schema);

      expect(result.isValid).toBe(false);
      expect(result.errors.some(e => e.rule === 'IDOC_TYPE_REQUIRED')).toBe(true);
    });
  });
});