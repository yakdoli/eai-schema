/**
 * 모든 스키마 파서의 기본 클래스
 */
export abstract class BaseParser {
  protected constructor() {}

  /**
   * 파서별 고유한 파싱 로직을 구현해야 합니다
   */
  abstract parse(content: string, options?: any): Promise<any>;

  /**
   * 공통 유틸리티 메서드들
   */
  protected normalizeWhitespace(text: string): string {
    return text.replace(/\s+/g, ' ').trim();
  }

  protected isValidUrl(url: string): boolean {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }

  protected extractTextContent(element: any): string {
    if (typeof element === 'string') {
      return element.trim();
    }
    
    if (element && element['#text']) {
      return element['#text'].trim();
    }
    
    return '';
  }

  protected ensureArray<T>(value: T | T[]): T[] {
    if (Array.isArray(value)) {
      return value;
    }
    return value ? [value] : [];
  }

  protected removeEmptyValues(obj: any): any {
    if (Array.isArray(obj)) {
      return obj.map(item => this.removeEmptyValues(item)).filter(item => item !== null && item !== undefined);
    }
    
    if (obj && typeof obj === 'object') {
      const cleaned: any = {};
      Object.keys(obj).forEach(key => {
        const value = this.removeEmptyValues(obj[key]);
        if (value !== null && value !== undefined && value !== '') {
          cleaned[key] = value;
        }
      });
      return Object.keys(cleaned).length > 0 ? cleaned : undefined;
    }
    
    return obj;
  }
}