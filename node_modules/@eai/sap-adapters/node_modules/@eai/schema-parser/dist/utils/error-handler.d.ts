import { ParseError } from '../types';
/**
 * 파싱 에러 처리기
 * 다양한 종류의 파싱 에러를 표준화된 형태로 변환하고 관리합니다.
 */
export declare class ErrorHandler {
    /**
     * 일반적인 Error 객체를 ParseError로 변환합니다.
     * @param error Error 객체
     * @param context 추가 컨텍스트 정보
     * @returns ParseError 객체
     */
    createParseError(error: Error, context?: {
        line?: number;
        column?: number;
        path?: string;
        code?: string;
    }): ParseError;
    /**
     * XML 구문 에러를 ParseError로 변환합니다.
     * @param message 에러 메시지
     * @param line 라인 번호
     * @param column 컬럼 번호
     * @returns ParseError 객체
     */
    createXMLSyntaxError(message: string, line?: number, column?: number): ParseError;
    /**
     * XSD 스키마 에러를 ParseError로 변환합니다.
     * @param message 에러 메시지
     * @param elementPath 요소 경로
     * @returns ParseError 객체
     */
    createXSDSchemaError(message: string, elementPath?: string): ParseError;
    /**
     * 네임스페이스 에러를 ParseError로 변환합니다.
     * @param message 에러 메시지
     * @param namespace 문제가 된 네임스페이스
     * @returns ParseError 객체
     */
    createNamespaceError(message: string, namespace?: string): ParseError;
    /**
     * 타입 정의 에러를 ParseError로 변환합니다.
     * @param message 에러 메시지
     * @param typeName 타입 이름
     * @returns ParseError 객체
     */
    createTypeDefinitionError(message: string, typeName?: string): ParseError;
    /**
     * 참조 해결 에러를 ParseError로 변환합니다.
     * @param message 에러 메시지
     * @param reference 참조 정보
     * @returns ParseError 객체
     */
    createReferenceError(message: string, reference?: string): ParseError;
    /**
     * 경고를 ParseError로 생성합니다.
     * @param message 경고 메시지
     * @param code 경고 코드
     * @param context 추가 컨텍스트
     * @returns ParseError 객체 (severity: 'warning')
     */
    createWarning(message: string, code?: string, context?: {
        line?: number;
        column?: number;
        path?: string;
    }): ParseError;
    /**
     * 정보성 메시지를 ParseError로 생성합니다.
     * @param message 정보 메시지
     * @param code 정보 코드
     * @param context 추가 컨텍스트
     * @returns ParseError 객체 (severity: 'info')
     */
    createInfo(message: string, code?: string, context?: {
        line?: number;
        column?: number;
        path?: string;
    }): ParseError;
    /**
     * 에러 목록을 심각도별로 분류합니다.
     * @param errors 에러 목록
     * @returns 심각도별로 분류된 에러
     */
    categorizeErrors(errors: ParseError[]): {
        errors: ParseError[];
        warnings: ParseError[];
        infos: ParseError[];
    };
    /**
     * 에러 목록을 코드별로 그룹화합니다.
     * @param errors 에러 목록
     * @returns 코드별로 그룹화된 에러
     */
    groupErrorsByCode(errors: ParseError[]): Map<string, ParseError[]>;
    /**
     * 에러 요약 정보를 생성합니다.
     * @param errors 에러 목록
     * @returns 에러 요약
     */
    createErrorSummary(errors: ParseError[]): {
        total: number;
        errorCount: number;
        warningCount: number;
        infoCount: number;
        codeBreakdown: Record<string, number>;
    };
    /**
     * 에러를 사용자 친화적인 메시지로 변환합니다.
     * @param error ParseError 객체
     * @returns 사용자 친화적인 메시지
     */
    formatUserFriendlyMessage(error: ParseError): string;
    /**
     * 위치 정보를 포맷합니다.
     * @param error ParseError 객체
     * @returns 포맷된 위치 정보
     */
    private formatLocation;
    /**
     * 심각도를 한국어로 포맷합니다.
     * @param severity 심각도
     * @returns 한국어 심각도
     */
    private formatSeverity;
    /**
     * 파싱 에러를 처리하고 표준화된 에러를 반환합니다.
     * @param error 원본 에러
     * @param parserType 파서 타입
     * @returns 표준화된 에러
     */
    handleParsingError(error: any, parserType: string): Error;
    /**
     * 에러 목록을 콘솔에 출력합니다 (디버깅용).
     * @param errors 에러 목록
     * @param title 제목
     */
    logErrors(errors: ParseError[], title?: string): void;
}
//# sourceMappingURL=error-handler.d.ts.map