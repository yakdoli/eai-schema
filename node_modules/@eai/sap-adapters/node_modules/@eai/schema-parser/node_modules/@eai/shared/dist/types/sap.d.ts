import { BaseSchema, SchemaType, Property, Constraint } from './index';
export interface SAPODataSchema extends BaseSchema {
    type: SchemaType.SAP_ODATA;
    content: SAPODataContent;
}
export interface SAPODataContent {
    entitySets: EntitySet[];
    entityTypes: EntityType[];
    complexTypes: ComplexType[];
    associations: Association[];
    functionImports: FunctionImport[];
    entityContainer: EntityContainer;
}
export interface EntitySet {
    name: string;
    entityType: string;
    annotations: ODataAnnotation[];
}
export interface EntityType {
    name: string;
    key: EntityKey;
    properties: ODataProperty[];
    navigationProperties: NavigationProperty[];
    annotations: ODataAnnotation[];
}
export interface EntityKey {
    propertyRefs: PropertyRef[];
}
export interface PropertyRef {
    name: string;
}
export interface ODataProperty extends Property {
    nullable: boolean;
    maxLength?: number;
    precision?: number;
    scale?: number;
    unicode?: boolean;
    fixedLength?: boolean;
    collation?: string;
    srid?: string;
}
export interface NavigationProperty {
    name: string;
    relationship: string;
    fromRole: string;
    toRole: string;
}
export interface ComplexType {
    name: string;
    properties: ODataProperty[];
    annotations: ODataAnnotation[];
}
export interface Association {
    name: string;
    ends: AssociationEnd[];
    referentialConstraint?: ReferentialConstraint;
}
export interface AssociationEnd {
    role: string;
    type: string;
    multiplicity: Multiplicity;
}
export declare enum Multiplicity {
    ZERO_OR_ONE = "0..1",
    ONE = "1",
    MANY = "*"
}
export interface ReferentialConstraint {
    principal: ReferentialConstraintRole;
    dependent: ReferentialConstraintRole;
}
export interface ReferentialConstraintRole {
    role: string;
    propertyRefs: PropertyRef[];
}
export interface FunctionImport {
    name: string;
    returnType?: string;
    entitySet?: string;
    httpMethod: string;
    parameters: FunctionParameter[];
}
export interface FunctionParameter {
    name: string;
    type: string;
    mode: ParameterMode;
    nullable?: boolean;
}
export declare enum ParameterMode {
    IN = "In",
    OUT = "Out",
    INOUT = "InOut"
}
export interface EntityContainer {
    name: string;
    isDefaultEntityContainer: boolean;
    entitySets: EntitySet[];
    functionImports: FunctionImport[];
}
export interface ODataAnnotation {
    term: string;
    qualifier?: string;
    value: any;
    target?: string;
}
export interface SAPIDocSchema extends BaseSchema {
    type: SchemaType.SAP_IDOC;
    content: SAPIDocContent;
}
export interface SAPIDocContent {
    idocType: string;
    release: string;
    segments: IDocSegment[];
    hierarchy: SegmentHierarchy;
    controlRecord: ControlRecord;
    dataRecords: DataRecord[];
}
export interface IDocSegment {
    name: string;
    definition: string;
    level: number;
    status: SegmentStatus;
    fields: IDocField[];
    children: IDocSegment[];
    parent?: string;
    minOccurs: number;
    maxOccurs: number;
}
export declare enum SegmentStatus {
    MANDATORY = "M",
    CONDITIONAL = "C",
    OPTIONAL = "O"
}
export interface IDocField {
    name: string;
    dataElement: string;
    dataType: string;
    length: number;
    decimals?: number;
    position: number;
    description: string;
    constraints: Constraint[];
}
export interface SegmentHierarchy {
    root: string;
    levels: HierarchyLevel[];
}
export interface HierarchyLevel {
    level: number;
    segments: string[];
}
export interface ControlRecord {
    tabnam: string;
    mandt: string;
    docnum: string;
    docrel: string;
    status: string;
    direct: string;
    outmod: string;
    idoctyp: string;
    mestyp: string;
    sndpor: string;
    sndprt: string;
    sndprn: string;
    rcvpor: string;
    rcvprt: string;
    rcvprn: string;
}
export interface DataRecord {
    segnam: string;
    mandt: string;
    docnum: string;
    segnum: string;
    psgnum: string;
    hlevel: string;
    sdata: string;
}
export interface SAPRFCSchema extends BaseSchema {
    type: SchemaType.SAP_RFC;
    content: SAPRFCContent;
}
export interface SAPRFCContent {
    functionName: string;
    functionGroup: string;
    shortText: string;
    importing: RFCParameter[];
    exporting: RFCParameter[];
    changing: RFCParameter[];
    tables: RFCTable[];
    exceptions: RFCException[];
    documentation: RFCDocumentation;
}
export interface RFCParameter {
    name: string;
    type: RFCParameterType;
    dataType: string;
    length?: number;
    decimals?: number;
    defaultValue?: any;
    optional: boolean;
    description: string;
    structure?: RFCStructure;
}
export declare enum RFCParameterType {
    ELEMENTARY = "ELEMENTARY",
    STRUCTURE = "STRUCTURE",
    TABLE = "TABLE"
}
export interface RFCStructure {
    name: string;
    fields: RFCField[];
}
export interface RFCField {
    name: string;
    dataType: string;
    length: number;
    decimals?: number;
    description: string;
    offset: number;
}
export interface RFCTable {
    name: string;
    type: string;
    description: string;
    structure: RFCStructure;
    optional: boolean;
}
export interface RFCException {
    name: string;
    description: string;
}
export interface RFCDocumentation {
    shortText: string;
    longText?: string;
    parameters: ParameterDocumentation[];
    exceptions: ExceptionDocumentation[];
}
export interface ParameterDocumentation {
    name: string;
    description: string;
    type: string;
}
export interface ExceptionDocumentation {
    name: string;
    description: string;
}
export interface SAPConnection {
    host: string;
    systemNumber: string;
    client: string;
    user: string;
    password: string;
    language?: string;
    poolSize?: number;
    timeout?: number;
}
export interface SAPSystemInfo {
    systemId: string;
    release: string;
    version: string;
    database: string;
    operatingSystem: string;
}
export interface SAPMetadataRequest {
    connection: SAPConnection;
    objectType: SAPObjectType;
    objectName: string;
    options?: SAPRequestOptions;
}
export declare enum SAPObjectType {
    ODATA_SERVICE = "ODATA_SERVICE",
    IDOC_TYPE = "IDOC_TYPE",
    RFC_FUNCTION = "RFC_FUNCTION",
    TABLE = "TABLE",
    VIEW = "VIEW",
    STRUCTURE = "STRUCTURE"
}
export interface SAPRequestOptions {
    includeDocumentation?: boolean;
    includeAnnotations?: boolean;
    maxDepth?: number;
    timeout?: number;
}
export interface SAPError {
    type: SAPErrorType;
    code: string;
    message: string;
    systemMessage?: string;
    details?: Record<string, any>;
}
export declare enum SAPErrorType {
    CONNECTION_ERROR = "CONNECTION_ERROR",
    AUTHENTICATION_ERROR = "AUTHENTICATION_ERROR",
    AUTHORIZATION_ERROR = "AUTHORIZATION_ERROR",
    OBJECT_NOT_FOUND = "OBJECT_NOT_FOUND",
    METADATA_ERROR = "METADATA_ERROR",
    PARSING_ERROR = "PARSING_ERROR",
    TIMEOUT_ERROR = "TIMEOUT_ERROR"
}
//# sourceMappingURL=sap.d.ts.map