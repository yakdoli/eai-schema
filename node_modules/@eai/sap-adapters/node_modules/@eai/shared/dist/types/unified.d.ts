import { BaseSchema, SchemaType, SchemaContent, ValidationResult } from './index';
import { WSDLSchema } from './wsdl';
import { XSDSchema } from './xsd';
import { OpenAPISchema } from './openapi';
import { JSONSchemaDocument } from './json-schema';
import { SAPODataSchema, SAPIDocSchema, SAPRFCSchema } from './sap';
export interface UnifiedSchema extends BaseSchema {
    content: SchemaContent;
    sourceSchema: AnySourceSchema;
    conversionMetadata: ConversionMetadata;
    validationResult: ValidationResult;
}
export type AnySourceSchema = WSDLSchema | XSDSchema | OpenAPISchema | JSONSchemaDocument | SAPODataSchema | SAPIDocSchema | SAPRFCSchema;
export type SchemaTypeMap = {
    [SchemaType.WSDL]: WSDLSchema;
    [SchemaType.XSD]: XSDSchema;
    [SchemaType.OPENAPI]: OpenAPISchema;
    [SchemaType.JSON_SCHEMA]: JSONSchemaDocument;
    [SchemaType.SAP_ODATA]: SAPODataSchema;
    [SchemaType.SAP_IDOC]: SAPIDocSchema;
    [SchemaType.SAP_RFC]: SAPRFCSchema;
    [SchemaType.EAI]: UnifiedSchema;
};
export interface ConversionMetadata {
    sourceType: SchemaType;
    targetType: SchemaType;
    conversionTime: number;
    rulesApplied: ConversionRule[];
    warnings: ConversionWarning[];
    lossyConversion: boolean;
    fidelityScore: number;
}
export interface ConversionRule {
    id: string;
    name: string;
    description: string;
    sourcePattern: string;
    targetPattern: string;
    transformation: string;
    priority: number;
    applied: boolean;
    appliedCount: number;
}
export interface ConversionWarning {
    code: string;
    message: string;
    sourcePath: string;
    impact: ConversionImpact;
    suggestion?: string;
}
export declare enum ConversionImpact {
    NONE = "NONE",
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    HIGH = "HIGH",
    CRITICAL = "CRITICAL"
}
export interface SchemaProcessingPipeline {
    stages: ProcessingStage[];
    currentStage: number;
    status: PipelineStatus;
    startTime: Date;
    endTime?: Date;
    totalTime?: number;
    errors: ProcessingError[];
}
export interface ProcessingStage {
    id: string;
    name: string;
    description: string;
    status: StageStatus;
    startTime?: Date;
    endTime?: Date;
    duration?: number;
    input?: any;
    output?: any;
    errors: ProcessingError[];
    warnings: ProcessingWarning[];
}
export declare enum PipelineStatus {
    PENDING = "PENDING",
    RUNNING = "RUNNING",
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    CANCELLED = "CANCELLED"
}
export declare enum StageStatus {
    PENDING = "PENDING",
    RUNNING = "RUNNING",
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    SKIPPED = "SKIPPED"
}
export interface ProcessingError {
    stage: string;
    code: string;
    message: string;
    details?: any;
    recoverable: boolean;
}
export interface ProcessingWarning {
    stage: string;
    code: string;
    message: string;
    details?: any;
}
export interface ExtendedSchemaMetadata {
    namespace?: string;
    targetNamespace?: string;
    version?: string;
    fileName: string;
    fileSize: number;
    filePath?: string;
    mimeType: string;
    encoding: string;
    parseTime: number;
    parserVersion: string;
    parsingOptions: Record<string, any>;
    elementCount: number;
    typeCount: number;
    operationCount: number;
    maxDepth: number;
    complexity: ComplexityMetrics;
    qualityScore: number;
    completeness: number;
    consistency: number;
    dependencies: SchemaDependency[];
    externalReferences: ExternalReference[];
    tags: string[];
    category: string;
    domain: string;
    createdBy: string;
    createdAt: Date;
    lastModifiedBy?: string;
    lastModifiedAt?: Date;
    version_history: VersionInfo[];
}
export interface ComplexityMetrics {
    cyclomaticComplexity: number;
    cognitiveComplexity: number;
    structuralComplexity: number;
    referenceComplexity: number;
}
export interface SchemaDependency {
    type: DependencyType;
    target: string;
    version?: string;
    optional: boolean;
    resolved: boolean;
}
export declare enum DependencyType {
    IMPORT = "IMPORT",
    INCLUDE = "INCLUDE",
    REFERENCE = "REFERENCE",
    INHERITANCE = "INHERITANCE"
}
export interface ExternalReference {
    uri: string;
    type: ReferenceType;
    resolved: boolean;
    lastChecked?: Date;
    status: ReferenceStatus;
}
export declare enum ReferenceType {
    SCHEMA = "SCHEMA",
    NAMESPACE = "NAMESPACE",
    TYPE = "TYPE",
    SERVICE = "SERVICE"
}
export declare enum ReferenceStatus {
    VALID = "VALID",
    INVALID = "INVALID",
    UNREACHABLE = "UNREACHABLE",
    UNKNOWN = "UNKNOWN"
}
export interface VersionInfo {
    version: string;
    timestamp: Date;
    author: string;
    changes: string[];
    breaking: boolean;
}
export interface SchemaAnalysis {
    schema: UnifiedSchema;
    metrics: AnalysisMetrics;
    patterns: DetectedPattern[];
    antiPatterns: DetectedAntiPattern[];
    recommendations: AnalysisRecommendation[];
    compliance: ComplianceResult[];
}
export interface AnalysisMetrics {
    size: SizeMetrics;
    complexity: ComplexityMetrics;
    quality: QualityMetrics;
    performance: AnalysisPerformanceMetrics;
}
export interface SizeMetrics {
    totalElements: number;
    totalTypes: number;
    totalOperations: number;
    averageDepth: number;
    maxDepth: number;
    breadth: number;
}
export interface QualityMetrics {
    documentationCoverage: number;
    namingConsistency: number;
    structuralConsistency: number;
    errorRate: number;
    warningRate: number;
}
export interface AnalysisPerformanceMetrics {
    parseTime: number;
    validationTime: number;
    memoryUsage: number;
    processingComplexity: string;
}
export interface DetectedPattern {
    id: string;
    name: string;
    description: string;
    category: PatternCategory;
    confidence: number;
    occurrences: PatternOccurrence[];
    benefits: string[];
}
export declare enum PatternCategory {
    DESIGN = "DESIGN",
    STRUCTURAL = "STRUCTURAL",
    BEHAVIORAL = "BEHAVIORAL",
    INTEGRATION = "INTEGRATION"
}
export interface PatternOccurrence {
    path: string;
    elements: string[];
    context: Record<string, any>;
}
export interface DetectedAntiPattern {
    id: string;
    name: string;
    description: string;
    severity: AntiPatternSeverity;
    occurrences: PatternOccurrence[];
    problems: string[];
    solutions: string[];
}
export declare enum AntiPatternSeverity {
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    HIGH = "HIGH",
    CRITICAL = "CRITICAL"
}
export interface AnalysisRecommendation {
    id: string;
    type: AnalysisRecommendationType;
    priority: AnalysisRecommendationPriority;
    title: string;
    description: string;
    rationale: string;
    implementation: string;
    estimatedEffort: EffortEstimate;
    impact: ImpactAssessment;
}
export declare enum AnalysisRecommendationType {
    REFACTORING = "REFACTORING",
    OPTIMIZATION = "OPTIMIZATION",
    STANDARDIZATION = "STANDARDIZATION",
    DOCUMENTATION = "DOCUMENTATION",
    SECURITY = "SECURITY",
    PERFORMANCE = "PERFORMANCE"
}
export declare enum AnalysisRecommendationPriority {
    CRITICAL = "CRITICAL",
    HIGH = "HIGH",
    MEDIUM = "MEDIUM",
    LOW = "LOW"
}
export interface EffortEstimate {
    hours: number;
    complexity: EffortComplexity;
    skills: string[];
    dependencies: string[];
}
export declare enum EffortComplexity {
    TRIVIAL = "TRIVIAL",
    SIMPLE = "SIMPLE",
    MODERATE = "MODERATE",
    COMPLEX = "COMPLEX",
    VERY_COMPLEX = "VERY_COMPLEX"
}
export interface ImpactAssessment {
    performance: ImpactLevel;
    maintainability: ImpactLevel;
    reliability: ImpactLevel;
    security: ImpactLevel;
    compatibility: ImpactLevel;
}
export declare enum ImpactLevel {
    NONE = "NONE",
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    HIGH = "HIGH",
    VERY_HIGH = "VERY_HIGH"
}
export interface ComplianceResult {
    standard: ComplianceStandard;
    version: string;
    overallScore: number;
    passedRules: number;
    totalRules: number;
    violations: ComplianceViolation[];
    recommendations: ComplianceRecommendation[];
}
export interface ComplianceStandard {
    id: string;
    name: string;
    description: string;
    category: StandardCategory;
    mandatory: boolean;
}
export declare enum StandardCategory {
    INDUSTRY = "INDUSTRY",
    ORGANIZATIONAL = "ORGANIZATIONAL",
    TECHNICAL = "TECHNICAL",
    SECURITY = "SECURITY",
    REGULATORY = "REGULATORY"
}
export interface ComplianceViolation {
    ruleId: string;
    ruleName: string;
    severity: ViolationSeverity;
    description: string;
    location: string;
    suggestion: string;
}
export declare enum ViolationSeverity {
    MINOR = "MINOR",
    MAJOR = "MAJOR",
    CRITICAL = "CRITICAL",
    BLOCKER = "BLOCKER"
}
export interface ComplianceRecommendation {
    ruleId: string;
    action: string;
    priority: AnalysisRecommendationPriority;
    effort: EffortEstimate;
}
export interface SchemaProcessingResult {
    success: boolean;
    unifiedSchema?: UnifiedSchema;
    pipeline: SchemaProcessingPipeline;
    analysis?: SchemaAnalysis;
    errors: ProcessingError[];
    warnings: ProcessingWarning[];
    metadata: ProcessingMetadata;
}
export interface ProcessingMetadata {
    processingId: string;
    startTime: Date;
    endTime: Date;
    totalTime: number;
    resourceUsage: ResourceUsageInfo;
    configuration: ProcessingConfiguration;
}
export interface ResourceUsageInfo {
    peakMemoryUsage: number;
    averageMemoryUsage: number;
    cpuTime: number;
    ioOperations: number;
    networkRequests: number;
}
export interface ProcessingConfiguration {
    options: Record<string, any>;
    rules: string[];
    plugins: string[];
    environment: string;
}
//# sourceMappingURL=unified.d.ts.map