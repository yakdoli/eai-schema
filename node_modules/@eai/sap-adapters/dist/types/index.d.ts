export * from '@eai/shared/types/sap';
export interface SAPAdapter<T> {
    parse(content: string, options?: SAPParseOptions): Promise<SAPParseResult<T>>;
    validate(schema: T): Promise<SAPValidationResult>;
    getMetadata(schema: T): SAPMetadata;
}
export interface SAPParseOptions {
    includeDocumentation?: boolean;
    includeAnnotations?: boolean;
    validateStructure?: boolean;
    maxDepth?: number;
    encoding?: string;
}
export interface SAPParseResult<T> {
    schema: T;
    metadata: SAPMetadata;
    errors: SAPParseError[];
    warnings: SAPParseWarning[];
    statistics: SAPParseStatistics;
}
export interface SAPMetadata {
    version: string;
    namespace?: string;
    systemInfo?: {
        release: string;
        version: string;
        client?: string;
    };
    createdAt: Date;
    parsedAt: Date;
}
export interface SAPParseError {
    code: string;
    message: string;
    line?: number;
    column?: number;
    element?: string;
    severity: 'error' | 'warning' | 'info';
}
export interface SAPParseWarning {
    code: string;
    message: string;
    line?: number;
    column?: number;
    element?: string;
    severity: 'warning';
}
export interface SAPParseStatistics {
    totalElements: number;
    parsedElements: number;
    errorCount: number;
    warningCount: number;
    processingTime: number;
}
export interface SAPValidationResult {
    isValid: boolean;
    errors: SAPValidationError[];
    warnings: SAPValidationWarning[];
    summary: SAPValidationSummary;
}
export interface SAPValidationError {
    rule: string;
    message: string;
    element?: string;
    path?: string;
    severity: 'error' | 'warning';
}
export interface SAPValidationWarning {
    rule: string;
    message: string;
    element?: string;
    path?: string;
    severity: 'warning';
}
export interface SAPValidationSummary {
    totalRules: number;
    passedRules: number;
    failedRules: number;
    warningRules: number;
}
//# sourceMappingURL=index.d.ts.map