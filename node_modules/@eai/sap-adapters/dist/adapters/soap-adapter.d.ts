import { WSDLSchema } from '@eai/shared/types/wsdl';
import { SAPAdapter, SAPParseOptions, SAPParseResult, SAPValidationResult, SAPMetadata } from '../types';
export interface SAPSOAPSchema extends Omit<WSDLSchema, 'type'> {
    type: 'SAP_SOAP';
    sapExtensions: SAPSOAPExtensions;
}
export interface SAPSOAPExtensions {
    piNamespace?: string;
    messageType?: string;
    interfaceName?: string;
    interfaceNamespace?: string;
    senderService?: string;
    receiverService?: string;
    senderParty?: string;
    receiverParty?: string;
    qualityOfService?: SAPQualityOfService;
    messageProtocol?: string;
    adapterType?: string;
    routingRules?: SAPRoutingRule[];
    transformationRules?: SAPTransformationRule[];
    errorHandling?: SAPErrorHandling;
}
export declare enum SAPQualityOfService {
    EXACTLY_ONCE = "ExactlyOnce",
    EXACTLY_ONCE_IN_ORDER = "ExactlyOnceInOrder",
    BEST_EFFORT = "BestEffort"
}
export interface SAPRoutingRule {
    condition: string;
    receiver: string;
    action?: string;
}
export interface SAPTransformationRule {
    name: string;
    type: 'MessageMapping' | 'OperationMapping' | 'JavaMapping' | 'XSLTMapping';
    source: string;
    target: string;
    parameters?: Record<string, any>;
}
export interface SAPErrorHandling {
    strategy: 'Stop' | 'Continue' | 'Retry';
    maxRetries?: number;
    retryInterval?: number;
    errorQueue?: string;
}
export declare class SOAPAdapter implements SAPAdapter<SAPSOAPSchema> {
    private wsdlParser;
    constructor();
    parse(content: string, options?: SAPParseOptions): Promise<SAPParseResult<SAPSOAPSchema>>;
    private extractSAPExtensions;
    private parseQualityOfService;
    private extractRoutingRules;
    private extractTransformationRules;
    private extractErrorHandling;
    validate(schema: SAPSOAPSchema): Promise<SAPValidationResult>;
    getMetadata(schema: SAPSOAPSchema): SAPMetadata;
    private countElements;
}
//# sourceMappingURL=soap-adapter.d.ts.map