// SAP 어댑터 패키지 메인 엔트리 포인트
export * from './types';
export * from './adapters/odata-adapter';
export * from './adapters/idoc-adapter';
export * from './adapters/rfc-adapter';
export * from './adapters/soap-adapter';
export * from './validators/sap-validator';
// SAP 어댑터 팩토리
import { ODataAdapter } from './adapters/odata-adapter';
import { IDocAdapter } from './adapters/idoc-adapter';
import { RFCAdapter } from './adapters/rfc-adapter';
import { SOAPAdapter } from './adapters/soap-adapter';
import { SAPValidator } from './validators/sap-validator';
import { SAPObjectType } from '@eai/shared/types/sap';
export class SAPAdapterFactory {
    static odataAdapter;
    static idocAdapter;
    static rfcAdapter;
    static soapAdapter;
    static validator;
    static getAdapter(objectType) {
        switch (objectType) {
            case SAPObjectType.ODATA_SERVICE:
                if (!this.odataAdapter) {
                    this.odataAdapter = new ODataAdapter();
                }
                return this.odataAdapter;
            case SAPObjectType.IDOC_TYPE:
                if (!this.idocAdapter) {
                    this.idocAdapter = new IDocAdapter();
                }
                return this.idocAdapter;
            case SAPObjectType.RFC_FUNCTION:
                if (!this.rfcAdapter) {
                    this.rfcAdapter = new RFCAdapter();
                }
                return this.rfcAdapter;
            default:
                throw new Error(`지원되지 않는 SAP 객체 타입: ${objectType}`);
        }
    }
    static getSOAPAdapter() {
        if (!this.soapAdapter) {
            this.soapAdapter = new SOAPAdapter();
        }
        return this.soapAdapter;
    }
    static getValidator() {
        if (!this.validator) {
            this.validator = new SAPValidator();
        }
        return this.validator;
    }
    static detectObjectType(content) {
        const trimmedContent = content.trim().toLowerCase();
        // OData 메타데이터 감지
        if (trimmedContent.includes('edmx:edmx') ||
            trimmedContent.includes('<edmx') ||
            trimmedContent.includes('dataservices')) {
            return SAPObjectType.ODATA_SERVICE;
        }
        // IDoc 감지
        if (trimmedContent.includes('<idoc') ||
            trimmedContent.includes('edi_dc40') ||
            trimmedContent.includes('edi_dc')) {
            return SAPObjectType.IDOC_TYPE;
        }
        // RFC 감지
        if (trimmedContent.includes('function ') ||
            trimmedContent.includes('<rfc') ||
            trimmedContent.includes('importing') ||
            trimmedContent.includes('exporting')) {
            return SAPObjectType.RFC_FUNCTION;
        }
        // WSDL/SOAP 감지 (SAP PI/PO)
        if (trimmedContent.includes('<definitions') ||
            trimmedContent.includes('wsdl:') ||
            trimmedContent.includes('soap:')) {
            return SAPObjectType.ODATA_SERVICE; // SOAP는 별도 처리
        }
        throw new Error('SAP 객체 타입을 감지할 수 없습니다.');
    }
}
// 편의 함수들
export async function parseSAPContent(content, objectType) {
    const detectedType = objectType || SAPAdapterFactory.detectObjectType(content);
    const adapter = SAPAdapterFactory.getAdapter(detectedType);
    return adapter.parse(content);
}
export async function validateSAPSchema(schema) {
    const validator = SAPAdapterFactory.getValidator();
    switch (schema.type) {
        case 'SAP_ODATA':
            return validator.validateODataSchema(schema);
        case 'SAP_IDOC':
            return validator.validateIDocSchema(schema);
        case 'SAP_RFC':
            return validator.validateRFCSchema(schema);
        case 'SAP_SOAP':
            return validator.validateSOAPSchema(schema);
        default:
            throw new Error(`지원되지 않는 SAP 스키마 타입: ${schema.type}`);
    }
}
