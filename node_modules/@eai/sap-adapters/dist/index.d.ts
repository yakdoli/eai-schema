export * from './types';
export * from './adapters/odata-adapter';
export * from './adapters/idoc-adapter';
export * from './adapters/rfc-adapter';
export * from './adapters/soap-adapter';
export * from './validators/sap-validator';
import { SOAPAdapter } from './adapters/soap-adapter';
import { SAPValidator } from './validators/sap-validator';
import { SAPObjectType } from '@eai/shared/types/sap';
import { SAPAdapter } from './types';
export declare class SAPAdapterFactory {
    private static odataAdapter;
    private static idocAdapter;
    private static rfcAdapter;
    private static soapAdapter;
    private static validator;
    static getAdapter(objectType: SAPObjectType): SAPAdapter<any>;
    static getSOAPAdapter(): SOAPAdapter;
    static getValidator(): SAPValidator;
    static detectObjectType(content: string): SAPObjectType;
}
export declare function parseSAPContent(content: string, objectType?: SAPObjectType): Promise<import("./types").SAPParseResult<any>>;
export declare function validateSAPSchema(schema: any): Promise<import("./types").SAPValidationResult>;
//# sourceMappingURL=index.d.ts.map