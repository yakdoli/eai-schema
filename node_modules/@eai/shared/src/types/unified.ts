// 통합 스키마 모델 인터페이스
import { 
  BaseSchema, 
  SchemaType, 
  SchemaContent, 
  ValidationResult, 
  ParseResult, 
  ConversionResult 
} from './index';
import { WSDLSchema } from './wsdl';
import { XSDSchema } from './xsd';
import { OpenAPISchema } from './openapi';
import { JSONSchemaDocument } from './json-schema';
import { SAPODataSchema, SAPIDocSchema, SAPRFCSchema } from './sap';

// 통합 스키마 인터페이스
export interface UnifiedSchema extends BaseSchema {
  content: SchemaContent;
  sourceSchema: AnySourceSchema;
  conversionMetadata: ConversionMetadata;
  validationResult: ValidationResult;
}

// 모든 소스 스키마 타입의 유니온
export type AnySourceSchema = 
  | WSDLSchema 
  | XSDSchema 
  | OpenAPISchema 
  | JSONSchemaDocument 
  | SAPODataSchema 
  | SAPIDocSchema 
  | SAPRFCSchema;

// 스키마 타입별 매핑
export type SchemaTypeMap = {
  [SchemaType.WSDL]: WSDLSchema;
  [SchemaType.XSD]: XSDSchema;
  [SchemaType.OPENAPI]: OpenAPISchema;
  [SchemaType.JSON_SCHEMA]: JSONSchemaDocument;
  [SchemaType.SAP_ODATA]: SAPODataSchema;
  [SchemaType.SAP_IDOC]: SAPIDocSchema;
  [SchemaType.SAP_RFC]: SAPRFCSchema;
  [SchemaType.EAI]: UnifiedSchema;
};

// 변환 메타데이터
export interface ConversionMetadata {
  sourceType: SchemaType;
  targetType: SchemaType;
  conversionTime: number;
  rulesApplied: ConversionRule[];
  warnings: ConversionWarning[];
  lossyConversion: boolean;
  fidelityScore: number; // 0-100, 변환 충실도 점수
}

export interface ConversionRule {
  id: string;
  name: string;
  description: string;
  sourcePattern: string;
  targetPattern: string;
  transformation: string;
  priority: number;
  applied: boolean;
  appliedCount: number;
}

export interface ConversionWarning {
  code: string;
  message: string;
  sourcePath: string;
  impact: ConversionImpact;
  suggestion?: string;
}

export enum ConversionImpact {
  NONE = 'NONE',
  LOW = 'LOW',
  MEDIUM = 'MEDIUM',
  HIGH = 'HIGH',
  CRITICAL = 'CRITICAL',
}

// 스키마 처리 파이프라인
export interface SchemaProcessingPipeline {
  stages: ProcessingStage[];
  currentStage: number;
  status: PipelineStatus;
  startTime: Date;
  endTime?: Date;
  totalTime?: number;
  errors: ProcessingError[];
}

export interface ProcessingStage {
  id: string;
  name: string;
  description: string;
  status: StageStatus;
  startTime?: Date;
  endTime?: Date;
  duration?: number;
  input?: any;
  output?: any;
  errors: ProcessingError[];
  warnings: ProcessingWarning[];
}

export enum PipelineStatus {
  PENDING = 'PENDING',
  RUNNING = 'RUNNING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
  CANCELLED = 'CANCELLED',
}

export enum StageStatus {
  PENDING = 'PENDING',
  RUNNING = 'RUNNING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
  SKIPPED = 'SKIPPED',
}

export interface ProcessingError {
  stage: string;
  code: string;
  message: string;
  details?: any;
  recoverable: boolean;
}

export interface ProcessingWarning {
  stage: string;
  code: string;
  message: string;
  details?: any;
}

// 스키마 메타데이터 확장
export interface ExtendedSchemaMetadata {
  // 기본 메타데이터
  namespace?: string;
  targetNamespace?: string;
  version?: string;
  
  // 파일 정보
  fileName: string;
  fileSize: number;
  filePath?: string;
  mimeType: string;
  encoding: string;
  
  // 파싱 정보
  parseTime: number;
  parserVersion: string;
  parsingOptions: Record<string, any>;
  
  // 구조 정보
  elementCount: number;
  typeCount: number;
  operationCount: number;
  maxDepth: number;
  complexity: ComplexityMetrics;
  
  // 품질 지표
  qualityScore: number; // 0-100
  completeness: number; // 0-100
  consistency: number; // 0-100
  
  // 의존성 정보
  dependencies: SchemaDependency[];
  externalReferences: ExternalReference[];
  
  // 태그 및 분류
  tags: string[];
  category: string;
  domain: string;
  
  // 생성 및 수정 정보
  createdBy: string;
  createdAt: Date;
  lastModifiedBy?: string;
  lastModifiedAt?: Date;
  version_history: VersionInfo[];
}

export interface ComplexityMetrics {
  cyclomaticComplexity: number;
  cognitiveComplexity: number;
  structuralComplexity: number;
  referenceComplexity: number;
}

export interface SchemaDependency {
  type: DependencyType;
  target: string;
  version?: string;
  optional: boolean;
  resolved: boolean;
}

export enum DependencyType {
  IMPORT = 'IMPORT',
  INCLUDE = 'INCLUDE',
  REFERENCE = 'REFERENCE',
  INHERITANCE = 'INHERITANCE',
}

export interface ExternalReference {
  uri: string;
  type: ReferenceType;
  resolved: boolean;
  lastChecked?: Date;
  status: ReferenceStatus;
}

export enum ReferenceType {
  SCHEMA = 'SCHEMA',
  NAMESPACE = 'NAMESPACE',
  TYPE = 'TYPE',
  SERVICE = 'SERVICE',
}

export enum ReferenceStatus {
  VALID = 'VALID',
  INVALID = 'INVALID',
  UNREACHABLE = 'UNREACHABLE',
  UNKNOWN = 'UNKNOWN',
}

export interface VersionInfo {
  version: string;
  timestamp: Date;
  author: string;
  changes: string[];
  breaking: boolean;
}

// 스키마 비교 및 분석
export interface SchemaAnalysis {
  schema: UnifiedSchema;
  metrics: AnalysisMetrics;
  patterns: DetectedPattern[];
  antiPatterns: DetectedAntiPattern[];
  recommendations: AnalysisRecommendation[];
  compliance: ComplianceResult[];
}

export interface AnalysisMetrics {
  size: SizeMetrics;
  complexity: ComplexityMetrics;
  quality: QualityMetrics;
  performance: AnalysisPerformanceMetrics;
}

export interface SizeMetrics {
  totalElements: number;
  totalTypes: number;
  totalOperations: number;
  averageDepth: number;
  maxDepth: number;
  breadth: number;
}

export interface QualityMetrics {
  documentationCoverage: number; // 0-100
  namingConsistency: number; // 0-100
  structuralConsistency: number; // 0-100
  errorRate: number; // 0-100
  warningRate: number; // 0-100
}

export interface AnalysisPerformanceMetrics {
  parseTime: number;
  validationTime: number;
  memoryUsage: number;
  processingComplexity: string; // O(n), O(n²), etc.
}

export interface DetectedPattern {
  id: string;
  name: string;
  description: string;
  category: PatternCategory;
  confidence: number; // 0-100
  occurrences: PatternOccurrence[];
  benefits: string[];
}

export enum PatternCategory {
  DESIGN = 'DESIGN',
  STRUCTURAL = 'STRUCTURAL',
  BEHAVIORAL = 'BEHAVIORAL',
  INTEGRATION = 'INTEGRATION',
}

export interface PatternOccurrence {
  path: string;
  elements: string[];
  context: Record<string, any>;
}

export interface DetectedAntiPattern {
  id: string;
  name: string;
  description: string;
  severity: AntiPatternSeverity;
  occurrences: PatternOccurrence[];
  problems: string[];
  solutions: string[];
}

export enum AntiPatternSeverity {
  LOW = 'LOW',
  MEDIUM = 'MEDIUM',
  HIGH = 'HIGH',
  CRITICAL = 'CRITICAL',
}

export interface AnalysisRecommendation {
  id: string;
  type: AnalysisRecommendationType;
  priority: AnalysisRecommendationPriority;
  title: string;
  description: string;
  rationale: string;
  implementation: string;
  estimatedEffort: EffortEstimate;
  impact: ImpactAssessment;
}

export enum AnalysisRecommendationType {
  REFACTORING = 'REFACTORING',
  OPTIMIZATION = 'OPTIMIZATION',
  STANDARDIZATION = 'STANDARDIZATION',
  DOCUMENTATION = 'DOCUMENTATION',
  SECURITY = 'SECURITY',
  PERFORMANCE = 'PERFORMANCE',
}

export enum AnalysisRecommendationPriority {
  CRITICAL = 'CRITICAL',
  HIGH = 'HIGH',
  MEDIUM = 'MEDIUM',
  LOW = 'LOW',
}

export interface EffortEstimate {
  hours: number;
  complexity: EffortComplexity;
  skills: string[];
  dependencies: string[];
}

export enum EffortComplexity {
  TRIVIAL = 'TRIVIAL',
  SIMPLE = 'SIMPLE',
  MODERATE = 'MODERATE',
  COMPLEX = 'COMPLEX',
  VERY_COMPLEX = 'VERY_COMPLEX',
}

export interface ImpactAssessment {
  performance: ImpactLevel;
  maintainability: ImpactLevel;
  reliability: ImpactLevel;
  security: ImpactLevel;
  compatibility: ImpactLevel;
}

export enum ImpactLevel {
  NONE = 'NONE',
  LOW = 'LOW',
  MEDIUM = 'MEDIUM',
  HIGH = 'HIGH',
  VERY_HIGH = 'VERY_HIGH',
}

export interface ComplianceResult {
  standard: ComplianceStandard;
  version: string;
  overallScore: number; // 0-100
  passedRules: number;
  totalRules: number;
  violations: ComplianceViolation[];
  recommendations: ComplianceRecommendation[];
}

export interface ComplianceStandard {
  id: string;
  name: string;
  description: string;
  category: StandardCategory;
  mandatory: boolean;
}

export enum StandardCategory {
  INDUSTRY = 'INDUSTRY',
  ORGANIZATIONAL = 'ORGANIZATIONAL',
  TECHNICAL = 'TECHNICAL',
  SECURITY = 'SECURITY',
  REGULATORY = 'REGULATORY',
}

export interface ComplianceViolation {
  ruleId: string;
  ruleName: string;
  severity: ViolationSeverity;
  description: string;
  location: string;
  suggestion: string;
}

export enum ViolationSeverity {
  MINOR = 'MINOR',
  MAJOR = 'MAJOR',
  CRITICAL = 'CRITICAL',
  BLOCKER = 'BLOCKER',
}

export interface ComplianceRecommendation {
  ruleId: string;
  action: string;
  priority: AnalysisRecommendationPriority;
  effort: EffortEstimate;
}

// 스키마 처리 결과 통합 타입
export interface SchemaProcessingResult {
  success: boolean;
  unifiedSchema?: UnifiedSchema;
  pipeline: SchemaProcessingPipeline;
  analysis?: SchemaAnalysis;
  errors: ProcessingError[];
  warnings: ProcessingWarning[];
  metadata: ProcessingMetadata;
}

export interface ProcessingMetadata {
  processingId: string;
  startTime: Date;
  endTime: Date;
  totalTime: number;
  resourceUsage: ResourceUsageInfo;
  configuration: ProcessingConfiguration;
}

export interface ResourceUsageInfo {
  peakMemoryUsage: number;
  averageMemoryUsage: number;
  cpuTime: number;
  ioOperations: number;
  networkRequests: number;
}

export interface ProcessingConfiguration {
  options: Record<string, any>;
  rules: string[];
  plugins: string[];
  environment: string;
}